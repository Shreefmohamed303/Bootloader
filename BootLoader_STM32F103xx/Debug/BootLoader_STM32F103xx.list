
BootLoader_STM32F103xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08001b1c  08001b1c  00011b1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001db0  08001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08001db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  20000078  08001e30  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001b8  08001e30  000201b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008dbc  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ca1  00000000  00000000  00028e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002af2  00000000  00000000  0002aafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000638  00000000  00000000  0002d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  0002dc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003393  00000000  00000000  0002e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000260a  00000000  00000000  00031773  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033d7d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001304  00000000  00000000  00033dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b04 	.word	0x08001b04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08001b04 	.word	0x08001b04

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f880 	bl	8000278 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f842 	bl	8000210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000010 	.word	0x20000010
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f81b 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f000 ff64 	bl	8001088 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000a0 	.word	0x200000a0

080001ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	0c1b      	lsrs	r3, r3, #16
 80001fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000206:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	68dc      	ldr	r4, [r3, #12]
 8000216:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000220:	2b04      	cmp	r3, #4
 8000222:	bf28      	it	cs
 8000224:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022c:	bf98      	it	ls
 800022e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	fa05 f303 	lsl.w	r3, r5, r3
 8000234:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	bf88      	it	hi
 800023a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	4019      	ands	r1, r3
 800023e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	3c01      	subs	r4, #1
 8000246:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000248:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	ea42 0201 	orr.w	r2, r2, r1
 800024e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	bfa9      	itett	ge
 8000254:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4b06      	ldrlt	r3, [pc, #24]	; (8000274 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	b2d2      	uxtbge	r2, r2
 800025c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfbb      	ittet	lt
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	541a      	strblt	r2, [r3, r0]
 800026e:	bd30      	pop	{r4, r5, pc}
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	3801      	subs	r0, #1
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d20a      	bcs.n	8000296 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000296:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80002a4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80002a6:	4604      	mov	r4, r0
 80002a8:	b150      	cbz	r0, 80002c0 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80002aa:	7943      	ldrb	r3, [r0, #5]
 80002ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80002b0:	b913      	cbnz	r3, 80002b8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80002b2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80002b4:	f000 ff0a 	bl	80010cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80002b8:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80002ba:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80002bc:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 80002be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80002c0:	2001      	movs	r0, #1
}
 80002c2:	bd10      	pop	{r4, pc}

080002c4 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80002c4:	4603      	mov	r3, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80002c6:	2002      	movs	r0, #2
{
 80002c8:	b510      	push	{r4, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80002ca:	7158      	strb	r0, [r3, #5]
 80002cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80002d0:	4291      	cmp	r1, r2
 80002d2:	6818      	ldr	r0, [r3, #0]
 80002d4:	d103      	bne.n	80002de <HAL_CRC_Accumulate+0x1a>
    hcrc->Instance->DR = pBuffer[index];
  }
  temp = hcrc->Instance->DR;

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80002d6:	2201      	movs	r2, #1
  temp = hcrc->Instance->DR;
 80002d8:	6800      	ldr	r0, [r0, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80002da:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
}
 80002dc:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 80002de:	f851 4b04 	ldr.w	r4, [r1], #4
 80002e2:	6004      	str	r4, [r0, #0]
 80002e4:	e7f4      	b.n	80002d0 <HAL_CRC_Accumulate+0xc>
	...

080002e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002ec:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002ee:	4626      	mov	r6, r4
 80002f0:	4b66      	ldr	r3, [pc, #408]	; (800048c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002f2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800049c <HAL_GPIO_Init+0x1b4>
 80002f6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80004a0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002fa:	680a      	ldr	r2, [r1, #0]
 80002fc:	fa32 f506 	lsrs.w	r5, r2, r6
 8000300:	d102      	bne.n	8000308 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000302:	b003      	add	sp, #12
 8000304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000308:	f04f 0801 	mov.w	r8, #1
 800030c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000310:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000314:	4590      	cmp	r8, r2
 8000316:	d17f      	bne.n	8000418 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000318:	684d      	ldr	r5, [r1, #4]
 800031a:	2d12      	cmp	r5, #18
 800031c:	f000 80aa 	beq.w	8000474 <HAL_GPIO_Init+0x18c>
 8000320:	f200 8083 	bhi.w	800042a <HAL_GPIO_Init+0x142>
 8000324:	2d02      	cmp	r5, #2
 8000326:	f000 80a2 	beq.w	800046e <HAL_GPIO_Init+0x186>
 800032a:	d877      	bhi.n	800041c <HAL_GPIO_Init+0x134>
 800032c:	2d00      	cmp	r5, #0
 800032e:	f000 8089 	beq.w	8000444 <HAL_GPIO_Init+0x15c>
 8000332:	2d01      	cmp	r5, #1
 8000334:	f000 8099 	beq.w	800046a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033c:	2aff      	cmp	r2, #255	; 0xff
 800033e:	bf93      	iteet	ls
 8000340:	4682      	movls	sl, r0
 8000342:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000346:	3d08      	subhi	r5, #8
 8000348:	f8d0 b000 	ldrls.w	fp, [r0]
 800034c:	bf92      	itee	ls
 800034e:	00b5      	lslls	r5, r6, #2
 8000350:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000354:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000356:	fa09 f805 	lsl.w	r8, r9, r5
 800035a:	ea2b 0808 	bic.w	r8, fp, r8
 800035e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000362:	bf88      	it	hi
 8000364:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000368:	ea48 0505 	orr.w	r5, r8, r5
 800036c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000370:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000374:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000378:	d04e      	beq.n	8000418 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4d45      	ldr	r5, [pc, #276]	; (8000490 <HAL_GPIO_Init+0x1a8>)
 800037c:	4f44      	ldr	r7, [pc, #272]	; (8000490 <HAL_GPIO_Init+0x1a8>)
 800037e:	69ad      	ldr	r5, [r5, #24]
 8000380:	f026 0803 	bic.w	r8, r6, #3
 8000384:	f045 0501 	orr.w	r5, r5, #1
 8000388:	61bd      	str	r5, [r7, #24]
 800038a:	69bd      	ldr	r5, [r7, #24]
 800038c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000390:	f005 0501 	and.w	r5, r5, #1
 8000394:	9501      	str	r5, [sp, #4]
 8000396:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800039a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80003a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003a8:	fa09 f90b 	lsl.w	r9, r9, fp
 80003ac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003b0:	4d38      	ldr	r5, [pc, #224]	; (8000494 <HAL_GPIO_Init+0x1ac>)
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d063      	beq.n	800047e <HAL_GPIO_Init+0x196>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d061      	beq.n	8000482 <HAL_GPIO_Init+0x19a>
 80003be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	d05f      	beq.n	8000486 <HAL_GPIO_Init+0x19e>
 80003c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ca:	42a8      	cmp	r0, r5
 80003cc:	bf0c      	ite	eq
 80003ce:	2503      	moveq	r5, #3
 80003d0:	2504      	movne	r5, #4
 80003d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003da:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003e4:	bf14      	ite	ne
 80003e6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003e8:	4395      	biceq	r5, r2
 80003ea:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003f2:	bf14      	ite	ne
 80003f4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003f6:	4395      	biceq	r5, r2
 80003f8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000400:	bf14      	ite	ne
 8000402:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000404:	4395      	biceq	r5, r2
 8000406:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000408:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800040a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800040e:	bf14      	ite	ne
 8000410:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000412:	ea25 0202 	biceq.w	r2, r5, r2
 8000416:	60da      	str	r2, [r3, #12]
	position++;
 8000418:	3601      	adds	r6, #1
 800041a:	e76e      	b.n	80002fa <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800041c:	2d03      	cmp	r5, #3
 800041e:	d022      	beq.n	8000466 <HAL_GPIO_Init+0x17e>
 8000420:	2d11      	cmp	r5, #17
 8000422:	d189      	bne.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000424:	68cc      	ldr	r4, [r1, #12]
 8000426:	3404      	adds	r4, #4
          break;
 8000428:	e786      	b.n	8000338 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800042a:	4f1b      	ldr	r7, [pc, #108]	; (8000498 <HAL_GPIO_Init+0x1b0>)
 800042c:	42bd      	cmp	r5, r7
 800042e:	d009      	beq.n	8000444 <HAL_GPIO_Init+0x15c>
 8000430:	d812      	bhi.n	8000458 <HAL_GPIO_Init+0x170>
 8000432:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80004a4 <HAL_GPIO_Init+0x1bc>
 8000436:	454d      	cmp	r5, r9
 8000438:	d004      	beq.n	8000444 <HAL_GPIO_Init+0x15c>
 800043a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800043e:	454d      	cmp	r5, r9
 8000440:	f47f af7a 	bne.w	8000338 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000444:	688c      	ldr	r4, [r1, #8]
 8000446:	b1c4      	cbz	r4, 800047a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000448:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800044a:	bf0c      	ite	eq
 800044c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000450:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000454:	2408      	movs	r4, #8
 8000456:	e76f      	b.n	8000338 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000458:	4575      	cmp	r5, lr
 800045a:	d0f3      	beq.n	8000444 <HAL_GPIO_Init+0x15c>
 800045c:	4565      	cmp	r5, ip
 800045e:	d0f1      	beq.n	8000444 <HAL_GPIO_Init+0x15c>
 8000460:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004a8 <HAL_GPIO_Init+0x1c0>
 8000464:	e7eb      	b.n	800043e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000466:	2400      	movs	r4, #0
 8000468:	e766      	b.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800046a:	68cc      	ldr	r4, [r1, #12]
          break;
 800046c:	e764      	b.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800046e:	68cc      	ldr	r4, [r1, #12]
 8000470:	3408      	adds	r4, #8
          break;
 8000472:	e761      	b.n	8000338 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000474:	68cc      	ldr	r4, [r1, #12]
 8000476:	340c      	adds	r4, #12
          break;
 8000478:	e75e      	b.n	8000338 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800047a:	2404      	movs	r4, #4
 800047c:	e75c      	b.n	8000338 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800047e:	2500      	movs	r5, #0
 8000480:	e7a7      	b.n	80003d2 <HAL_GPIO_Init+0xea>
 8000482:	2501      	movs	r5, #1
 8000484:	e7a5      	b.n	80003d2 <HAL_GPIO_Init+0xea>
 8000486:	2502      	movs	r5, #2
 8000488:	e7a3      	b.n	80003d2 <HAL_GPIO_Init+0xea>
 800048a:	bf00      	nop
 800048c:	40010400 	.word	0x40010400
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800
 8000498:	10210000 	.word	0x10210000
 800049c:	10310000 	.word	0x10310000
 80004a0:	10320000 	.word	0x10320000
 80004a4:	10110000 	.word	0x10110000
 80004a8:	10220000 	.word	0x10220000

080004ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004ac:	6883      	ldr	r3, [r0, #8]
 80004ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004b0:	bf14      	ite	ne
 80004b2:	2001      	movne	r0, #1
 80004b4:	2000      	moveq	r0, #0
 80004b6:	4770      	bx	lr

080004b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004b8:	b10a      	cbz	r2, 80004be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80004ba:	6101      	str	r1, [r0, #16]
 80004bc:	4770      	bx	lr
 80004be:	0409      	lsls	r1, r1, #16
 80004c0:	e7fb      	b.n	80004ba <HAL_GPIO_WritePin+0x2>
	...

080004c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004c8:	4605      	mov	r5, r0
 80004ca:	b908      	cbnz	r0, 80004d0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004cc:	2001      	movs	r0, #1
 80004ce:	e03c      	b.n	800054a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d0:	6803      	ldr	r3, [r0, #0]
 80004d2:	07db      	lsls	r3, r3, #31
 80004d4:	d410      	bmi.n	80004f8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d6:	682b      	ldr	r3, [r5, #0]
 80004d8:	079f      	lsls	r7, r3, #30
 80004da:	d45d      	bmi.n	8000598 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004dc:	682b      	ldr	r3, [r5, #0]
 80004de:	0719      	lsls	r1, r3, #28
 80004e0:	f100 8094 	bmi.w	800060c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004e4:	682b      	ldr	r3, [r5, #0]
 80004e6:	075a      	lsls	r2, r3, #29
 80004e8:	f100 80be 	bmi.w	8000668 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004ec:	69e8      	ldr	r0, [r5, #28]
 80004ee:	2800      	cmp	r0, #0
 80004f0:	f040 812c 	bne.w	800074c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004f4:	2000      	movs	r0, #0
 80004f6:	e028      	b.n	800054a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004f8:	4c8f      	ldr	r4, [pc, #572]	; (8000738 <HAL_RCC_OscConfig+0x274>)
 80004fa:	6863      	ldr	r3, [r4, #4]
 80004fc:	f003 030c 	and.w	r3, r3, #12
 8000500:	2b04      	cmp	r3, #4
 8000502:	d007      	beq.n	8000514 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	f003 030c 	and.w	r3, r3, #12
 800050a:	2b08      	cmp	r3, #8
 800050c:	d109      	bne.n	8000522 <HAL_RCC_OscConfig+0x5e>
 800050e:	6863      	ldr	r3, [r4, #4]
 8000510:	03de      	lsls	r6, r3, #15
 8000512:	d506      	bpl.n	8000522 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	039c      	lsls	r4, r3, #14
 8000518:	d5dd      	bpl.n	80004d6 <HAL_RCC_OscConfig+0x12>
 800051a:	686b      	ldr	r3, [r5, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1da      	bne.n	80004d6 <HAL_RCC_OscConfig+0x12>
 8000520:	e7d4      	b.n	80004cc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000522:	686b      	ldr	r3, [r5, #4]
 8000524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000528:	d112      	bne.n	8000550 <HAL_RCC_OscConfig+0x8c>
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000532:	f7ff fe55 	bl	80001e0 <HAL_GetTick>
 8000536:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000538:	6823      	ldr	r3, [r4, #0]
 800053a:	0398      	lsls	r0, r3, #14
 800053c:	d4cb      	bmi.n	80004d6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800053e:	f7ff fe4f 	bl	80001e0 <HAL_GetTick>
 8000542:	1b80      	subs	r0, r0, r6
 8000544:	2864      	cmp	r0, #100	; 0x64
 8000546:	d9f7      	bls.n	8000538 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000548:	2003      	movs	r0, #3
}
 800054a:	b002      	add	sp, #8
 800054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000550:	b99b      	cbnz	r3, 800057a <HAL_RCC_OscConfig+0xb6>
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000558:	6023      	str	r3, [r4, #0]
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000560:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000562:	f7ff fe3d 	bl	80001e0 <HAL_GetTick>
 8000566:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	0399      	lsls	r1, r3, #14
 800056c:	d5b3      	bpl.n	80004d6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800056e:	f7ff fe37 	bl	80001e0 <HAL_GetTick>
 8000572:	1b80      	subs	r0, r0, r6
 8000574:	2864      	cmp	r0, #100	; 0x64
 8000576:	d9f7      	bls.n	8000568 <HAL_RCC_OscConfig+0xa4>
 8000578:	e7e6      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	d103      	bne.n	800058a <HAL_RCC_OscConfig+0xc6>
 8000582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000586:	6023      	str	r3, [r4, #0]
 8000588:	e7cf      	b.n	800052a <HAL_RCC_OscConfig+0x66>
 800058a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058e:	6023      	str	r3, [r4, #0]
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000596:	e7cb      	b.n	8000530 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000598:	4c67      	ldr	r4, [pc, #412]	; (8000738 <HAL_RCC_OscConfig+0x274>)
 800059a:	6863      	ldr	r3, [r4, #4]
 800059c:	f013 0f0c 	tst.w	r3, #12
 80005a0:	d007      	beq.n	80005b2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005a2:	6863      	ldr	r3, [r4, #4]
 80005a4:	f003 030c 	and.w	r3, r3, #12
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d110      	bne.n	80005ce <HAL_RCC_OscConfig+0x10a>
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	03da      	lsls	r2, r3, #15
 80005b0:	d40d      	bmi.n	80005ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	079b      	lsls	r3, r3, #30
 80005b6:	d502      	bpl.n	80005be <HAL_RCC_OscConfig+0xfa>
 80005b8:	692b      	ldr	r3, [r5, #16]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d186      	bne.n	80004cc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	696a      	ldr	r2, [r5, #20]
 80005c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005ca:	6023      	str	r3, [r4, #0]
 80005cc:	e786      	b.n	80004dc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ce:	692a      	ldr	r2, [r5, #16]
 80005d0:	4b5a      	ldr	r3, [pc, #360]	; (800073c <HAL_RCC_OscConfig+0x278>)
 80005d2:	b16a      	cbz	r2, 80005f0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d8:	f7ff fe02 	bl	80001e0 <HAL_GetTick>
 80005dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	079f      	lsls	r7, r3, #30
 80005e2:	d4ec      	bmi.n	80005be <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005e4:	f7ff fdfc 	bl	80001e0 <HAL_GetTick>
 80005e8:	1b80      	subs	r0, r0, r6
 80005ea:	2802      	cmp	r0, #2
 80005ec:	d9f7      	bls.n	80005de <HAL_RCC_OscConfig+0x11a>
 80005ee:	e7ab      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005f2:	f7ff fdf5 	bl	80001e0 <HAL_GetTick>
 80005f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	0798      	lsls	r0, r3, #30
 80005fc:	f57f af6e 	bpl.w	80004dc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000600:	f7ff fdee 	bl	80001e0 <HAL_GetTick>
 8000604:	1b80      	subs	r0, r0, r6
 8000606:	2802      	cmp	r0, #2
 8000608:	d9f6      	bls.n	80005f8 <HAL_RCC_OscConfig+0x134>
 800060a:	e79d      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800060c:	69aa      	ldr	r2, [r5, #24]
 800060e:	4c4a      	ldr	r4, [pc, #296]	; (8000738 <HAL_RCC_OscConfig+0x274>)
 8000610:	4b4b      	ldr	r3, [pc, #300]	; (8000740 <HAL_RCC_OscConfig+0x27c>)
 8000612:	b1da      	cbz	r2, 800064c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000618:	f7ff fde2 	bl	80001e0 <HAL_GetTick>
 800061c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800061e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000620:	079b      	lsls	r3, r3, #30
 8000622:	d50d      	bpl.n	8000640 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000624:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000628:	4b46      	ldr	r3, [pc, #280]	; (8000744 <HAL_RCC_OscConfig+0x280>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000630:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000632:	bf00      	nop
  }
  while (Delay --);
 8000634:	9b01      	ldr	r3, [sp, #4]
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f9      	bne.n	8000632 <HAL_RCC_OscConfig+0x16e>
 800063e:	e751      	b.n	80004e4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000640:	f7ff fdce 	bl	80001e0 <HAL_GetTick>
 8000644:	1b80      	subs	r0, r0, r6
 8000646:	2802      	cmp	r0, #2
 8000648:	d9e9      	bls.n	800061e <HAL_RCC_OscConfig+0x15a>
 800064a:	e77d      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800064c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064e:	f7ff fdc7 	bl	80001e0 <HAL_GetTick>
 8000652:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000656:	079f      	lsls	r7, r3, #30
 8000658:	f57f af44 	bpl.w	80004e4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800065c:	f7ff fdc0 	bl	80001e0 <HAL_GetTick>
 8000660:	1b80      	subs	r0, r0, r6
 8000662:	2802      	cmp	r0, #2
 8000664:	d9f6      	bls.n	8000654 <HAL_RCC_OscConfig+0x190>
 8000666:	e76f      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000668:	4c33      	ldr	r4, [pc, #204]	; (8000738 <HAL_RCC_OscConfig+0x274>)
 800066a:	69e3      	ldr	r3, [r4, #28]
 800066c:	00d8      	lsls	r0, r3, #3
 800066e:	d424      	bmi.n	80006ba <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000670:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	69e3      	ldr	r3, [r4, #28]
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61e3      	str	r3, [r4, #28]
 800067a:	69e3      	ldr	r3, [r4, #28]
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000684:	4e30      	ldr	r6, [pc, #192]	; (8000748 <HAL_RCC_OscConfig+0x284>)
 8000686:	6833      	ldr	r3, [r6, #0]
 8000688:	05d9      	lsls	r1, r3, #23
 800068a:	d518      	bpl.n	80006be <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800068c:	68eb      	ldr	r3, [r5, #12]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d126      	bne.n	80006e0 <HAL_RCC_OscConfig+0x21c>
 8000692:	6a23      	ldr	r3, [r4, #32]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800069a:	f7ff fda1 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800069e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006a2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006a4:	6a23      	ldr	r3, [r4, #32]
 80006a6:	079b      	lsls	r3, r3, #30
 80006a8:	d53f      	bpl.n	800072a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	f43f af1e 	beq.w	80004ec <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006b0:	69e3      	ldr	r3, [r4, #28]
 80006b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006b6:	61e3      	str	r3, [r4, #28]
 80006b8:	e718      	b.n	80004ec <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80006ba:	2700      	movs	r7, #0
 80006bc:	e7e2      	b.n	8000684 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006be:	6833      	ldr	r3, [r6, #0]
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006c6:	f7ff fd8b 	bl	80001e0 <HAL_GetTick>
 80006ca:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006cc:	6833      	ldr	r3, [r6, #0]
 80006ce:	05da      	lsls	r2, r3, #23
 80006d0:	d4dc      	bmi.n	800068c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006d2:	f7ff fd85 	bl	80001e0 <HAL_GetTick>
 80006d6:	eba0 0008 	sub.w	r0, r0, r8
 80006da:	2864      	cmp	r0, #100	; 0x64
 80006dc:	d9f6      	bls.n	80006cc <HAL_RCC_OscConfig+0x208>
 80006de:	e733      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e0:	b9ab      	cbnz	r3, 800070e <HAL_RCC_OscConfig+0x24a>
 80006e2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	6223      	str	r3, [r4, #32]
 80006ee:	6a23      	ldr	r3, [r4, #32]
 80006f0:	f023 0304 	bic.w	r3, r3, #4
 80006f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006f6:	f7ff fd73 	bl	80001e0 <HAL_GetTick>
 80006fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006fc:	6a23      	ldr	r3, [r4, #32]
 80006fe:	0798      	lsls	r0, r3, #30
 8000700:	d5d3      	bpl.n	80006aa <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000702:	f7ff fd6d 	bl	80001e0 <HAL_GetTick>
 8000706:	1b80      	subs	r0, r0, r6
 8000708:	4540      	cmp	r0, r8
 800070a:	d9f7      	bls.n	80006fc <HAL_RCC_OscConfig+0x238>
 800070c:	e71c      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070e:	2b05      	cmp	r3, #5
 8000710:	6a23      	ldr	r3, [r4, #32]
 8000712:	d103      	bne.n	800071c <HAL_RCC_OscConfig+0x258>
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6223      	str	r3, [r4, #32]
 800071a:	e7ba      	b.n	8000692 <HAL_RCC_OscConfig+0x1ce>
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	6223      	str	r3, [r4, #32]
 8000722:	6a23      	ldr	r3, [r4, #32]
 8000724:	f023 0304 	bic.w	r3, r3, #4
 8000728:	e7b6      	b.n	8000698 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800072a:	f7ff fd59 	bl	80001e0 <HAL_GetTick>
 800072e:	eba0 0008 	sub.w	r0, r0, r8
 8000732:	42b0      	cmp	r0, r6
 8000734:	d9b6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x1e0>
 8000736:	e707      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
 8000738:	40021000 	.word	0x40021000
 800073c:	42420000 	.word	0x42420000
 8000740:	42420480 	.word	0x42420480
 8000744:	20000010 	.word	0x20000010
 8000748:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <HAL_RCC_OscConfig+0x334>)
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	461c      	mov	r4, r3
 8000752:	f002 020c 	and.w	r2, r2, #12
 8000756:	2a08      	cmp	r2, #8
 8000758:	d03d      	beq.n	80007d6 <HAL_RCC_OscConfig+0x312>
 800075a:	2300      	movs	r3, #0
 800075c:	4e27      	ldr	r6, [pc, #156]	; (80007fc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800075e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000760:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000762:	d12b      	bne.n	80007bc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000764:	f7ff fd3c 	bl	80001e0 <HAL_GetTick>
 8000768:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	0199      	lsls	r1, r3, #6
 800076e:	d41f      	bmi.n	80007b0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000770:	6a2b      	ldr	r3, [r5, #32]
 8000772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000776:	d105      	bne.n	8000784 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000778:	6862      	ldr	r2, [r4, #4]
 800077a:	68a9      	ldr	r1, [r5, #8]
 800077c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000780:	430a      	orrs	r2, r1
 8000782:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000784:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000786:	6862      	ldr	r2, [r4, #4]
 8000788:	430b      	orrs	r3, r1
 800078a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800078e:	4313      	orrs	r3, r2
 8000790:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000792:	2301      	movs	r3, #1
 8000794:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000796:	f7ff fd23 	bl	80001e0 <HAL_GetTick>
 800079a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	019a      	lsls	r2, r3, #6
 80007a0:	f53f aea8 	bmi.w	80004f4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007a4:	f7ff fd1c 	bl	80001e0 <HAL_GetTick>
 80007a8:	1b40      	subs	r0, r0, r5
 80007aa:	2802      	cmp	r0, #2
 80007ac:	d9f6      	bls.n	800079c <HAL_RCC_OscConfig+0x2d8>
 80007ae:	e6cb      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007b0:	f7ff fd16 	bl	80001e0 <HAL_GetTick>
 80007b4:	1bc0      	subs	r0, r0, r7
 80007b6:	2802      	cmp	r0, #2
 80007b8:	d9d7      	bls.n	800076a <HAL_RCC_OscConfig+0x2a6>
 80007ba:	e6c5      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007bc:	f7ff fd10 	bl	80001e0 <HAL_GetTick>
 80007c0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	f57f ae95 	bpl.w	80004f4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007ca:	f7ff fd09 	bl	80001e0 <HAL_GetTick>
 80007ce:	1b40      	subs	r0, r0, r5
 80007d0:	2802      	cmp	r0, #2
 80007d2:	d9f6      	bls.n	80007c2 <HAL_RCC_OscConfig+0x2fe>
 80007d4:	e6b8      	b.n	8000548 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007d6:	2801      	cmp	r0, #1
 80007d8:	f43f aeb7 	beq.w	800054a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007dc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007de:	6a2b      	ldr	r3, [r5, #32]
 80007e0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007e4:	429a      	cmp	r2, r3
 80007e6:	f47f ae71 	bne.w	80004cc <HAL_RCC_OscConfig+0x8>
 80007ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007ec:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007f0:	1ac0      	subs	r0, r0, r3
 80007f2:	bf18      	it	ne
 80007f4:	2001      	movne	r0, #1
 80007f6:	e6a8      	b.n	800054a <HAL_RCC_OscConfig+0x86>
 80007f8:	40021000 	.word	0x40021000
 80007fc:	42420060 	.word	0x42420060

08000800 <HAL_RCC_GetSysClockFreq>:
{
 8000800:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000804:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000806:	ac02      	add	r4, sp, #8
 8000808:	f103 0510 	add.w	r5, r3, #16
 800080c:	4622      	mov	r2, r4
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	6859      	ldr	r1, [r3, #4]
 8000812:	3308      	adds	r3, #8
 8000814:	c203      	stmia	r2!, {r0, r1}
 8000816:	42ab      	cmp	r3, r5
 8000818:	4614      	mov	r4, r2
 800081a:	d1f7      	bne.n	800080c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800081c:	2301      	movs	r3, #1
 800081e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000826:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800082a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800082c:	f003 020c 	and.w	r2, r3, #12
 8000830:	2a08      	cmp	r2, #8
 8000832:	d117      	bne.n	8000864 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000834:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000838:	a806      	add	r0, sp, #24
 800083a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800083c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800083e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000842:	d50c      	bpl.n	800085e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000844:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000848:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800084c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800084e:	aa06      	add	r2, sp, #24
 8000850:	4413      	add	r3, r2
 8000852:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000856:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800085a:	b007      	add	sp, #28
 800085c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <HAL_RCC_GetSysClockFreq+0x74>)
 8000860:	4350      	muls	r0, r2
 8000862:	e7fa      	b.n	800085a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000866:	e7f8      	b.n	800085a <HAL_RCC_GetSysClockFreq+0x5a>
 8000868:	08001b1c 	.word	0x08001b1c
 800086c:	40021000 	.word	0x40021000
 8000870:	007a1200 	.word	0x007a1200
 8000874:	003d0900 	.word	0x003d0900

08000878 <HAL_RCC_ClockConfig>:
{
 8000878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800087c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800087e:	4604      	mov	r4, r0
 8000880:	b910      	cbnz	r0, 8000888 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000882:	2001      	movs	r0, #1
 8000884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000888:	4a45      	ldr	r2, [pc, #276]	; (80009a0 <HAL_RCC_ClockConfig+0x128>)
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	428b      	cmp	r3, r1
 8000892:	d329      	bcc.n	80008e8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000894:	6821      	ldr	r1, [r4, #0]
 8000896:	078e      	lsls	r6, r1, #30
 8000898:	d431      	bmi.n	80008fe <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800089a:	07ca      	lsls	r2, r1, #31
 800089c:	d444      	bmi.n	8000928 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800089e:	4a40      	ldr	r2, [pc, #256]	; (80009a0 <HAL_RCC_ClockConfig+0x128>)
 80008a0:	6813      	ldr	r3, [r2, #0]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	429d      	cmp	r5, r3
 80008a8:	d367      	bcc.n	800097a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008aa:	6822      	ldr	r2, [r4, #0]
 80008ac:	4d3d      	ldr	r5, [pc, #244]	; (80009a4 <HAL_RCC_ClockConfig+0x12c>)
 80008ae:	f012 0f04 	tst.w	r2, #4
 80008b2:	d16e      	bne.n	8000992 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b4:	0713      	lsls	r3, r2, #28
 80008b6:	d506      	bpl.n	80008c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008b8:	686b      	ldr	r3, [r5, #4]
 80008ba:	6922      	ldr	r2, [r4, #16]
 80008bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008c4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008c6:	f7ff ff9b 	bl	8000800 <HAL_RCC_GetSysClockFreq>
 80008ca:	686b      	ldr	r3, [r5, #4]
 80008cc:	4a36      	ldr	r2, [pc, #216]	; (80009a8 <HAL_RCC_ClockConfig+0x130>)
 80008ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008d2:	5cd3      	ldrb	r3, [r2, r3]
 80008d4:	40d8      	lsrs	r0, r3
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_RCC_ClockConfig+0x134>)
 80008d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <HAL_RCC_ClockConfig+0x138>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f7ff fc3d 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008e2:	2000      	movs	r0, #0
 80008e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008e8:	6813      	ldr	r3, [r2, #0]
 80008ea:	f023 0307 	bic.w	r3, r3, #7
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008f2:	6813      	ldr	r3, [r2, #0]
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	4299      	cmp	r1, r3
 80008fa:	d1c2      	bne.n	8000882 <HAL_RCC_ClockConfig+0xa>
 80008fc:	e7ca      	b.n	8000894 <HAL_RCC_ClockConfig+0x1c>
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000900:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000904:	bf1e      	ittt	ne
 8000906:	685a      	ldrne	r2, [r3, #4]
 8000908:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800090c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800090e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000910:	bf42      	ittt	mi
 8000912:	685a      	ldrmi	r2, [r3, #4]
 8000914:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000918:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	68a0      	ldr	r0, [r4, #8]
 800091e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000922:	4302      	orrs	r2, r0
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	e7b8      	b.n	800089a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000928:	6862      	ldr	r2, [r4, #4]
 800092a:	4e1e      	ldr	r6, [pc, #120]	; (80009a4 <HAL_RCC_ClockConfig+0x12c>)
 800092c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000930:	d11b      	bne.n	800096a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000932:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000936:	d0a4      	beq.n	8000882 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000938:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800093a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800093e:	f023 0303 	bic.w	r3, r3, #3
 8000942:	4313      	orrs	r3, r2
 8000944:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000946:	f7ff fc4b 	bl	80001e0 <HAL_GetTick>
 800094a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800094c:	6873      	ldr	r3, [r6, #4]
 800094e:	6862      	ldr	r2, [r4, #4]
 8000950:	f003 030c 	and.w	r3, r3, #12
 8000954:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000958:	d0a1      	beq.n	800089e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800095a:	f7ff fc41 	bl	80001e0 <HAL_GetTick>
 800095e:	1bc0      	subs	r0, r0, r7
 8000960:	4540      	cmp	r0, r8
 8000962:	d9f3      	bls.n	800094c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000964:	2003      	movs	r0, #3
}
 8000966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800096a:	2a02      	cmp	r2, #2
 800096c:	d102      	bne.n	8000974 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000972:	e7e0      	b.n	8000936 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000974:	f013 0f02 	tst.w	r3, #2
 8000978:	e7dd      	b.n	8000936 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800097a:	6813      	ldr	r3, [r2, #0]
 800097c:	f023 0307 	bic.w	r3, r3, #7
 8000980:	432b      	orrs	r3, r5
 8000982:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000984:	6813      	ldr	r3, [r2, #0]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	429d      	cmp	r5, r3
 800098c:	f47f af79 	bne.w	8000882 <HAL_RCC_ClockConfig+0xa>
 8000990:	e78b      	b.n	80008aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000992:	686b      	ldr	r3, [r5, #4]
 8000994:	68e1      	ldr	r1, [r4, #12]
 8000996:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800099a:	430b      	orrs	r3, r1
 800099c:	606b      	str	r3, [r5, #4]
 800099e:	e789      	b.n	80008b4 <HAL_RCC_ClockConfig+0x3c>
 80009a0:	40022000 	.word	0x40022000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	08001d65 	.word	0x08001d65
 80009ac:	20000010 	.word	0x20000010
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009c2:	6810      	ldr	r0, [r2, #0]
}
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000
 80009cc:	08001d75 	.word	0x08001d75
 80009d0:	20000010 	.word	0x20000010

080009d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009e2:	6810      	ldr	r0, [r2, #0]
}
 80009e4:	40d8      	lsrs	r0, r3
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000
 80009ec:	08001d75 	.word	0x08001d75
 80009f0:	20000010 	.word	0x20000010

080009f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009f4:	b538      	push	{r3, r4, r5, lr}
 80009f6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009f8:	6803      	ldr	r3, [r0, #0]
 80009fa:	68c1      	ldr	r1, [r0, #12]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	2419      	movs	r4, #25
 8000a00:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a04:	430a      	orrs	r2, r1
 8000a06:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a08:	6882      	ldr	r2, [r0, #8]
 8000a0a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000a0c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a0e:	4302      	orrs	r2, r0
 8000a10:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000a12:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000a16:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a1a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	69a9      	ldr	r1, [r5, #24]
 8000a24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <UART_SetConfig+0x70>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d114      	bne.n	8000a5c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000a32:	f7ff ffcf 	bl	80009d4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000a36:	4360      	muls	r0, r4
 8000a38:	686c      	ldr	r4, [r5, #4]
 8000a3a:	2264      	movs	r2, #100	; 0x64
 8000a3c:	00a4      	lsls	r4, r4, #2
 8000a3e:	fbb0 f0f4 	udiv	r0, r0, r4
 8000a42:	fbb0 f4f2 	udiv	r4, r0, r2
 8000a46:	fb02 0314 	mls	r3, r2, r4, r0
 8000a4a:	011b      	lsls	r3, r3, #4
 8000a4c:	3332      	adds	r3, #50	; 0x32
 8000a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a52:	6829      	ldr	r1, [r5, #0]
 8000a54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000a58:	608b      	str	r3, [r1, #8]
 8000a5a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000a5c:	f7ff ffaa 	bl	80009b4 <HAL_RCC_GetPCLK1Freq>
 8000a60:	e7e9      	b.n	8000a36 <UART_SetConfig+0x42>
 8000a62:	bf00      	nop
 8000a64:	40013800 	.word	0x40013800

08000a68 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	460e      	mov	r6, r1
 8000a6e:	4617      	mov	r7, r2
 8000a70:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000a72:	6821      	ldr	r1, [r4, #0]
 8000a74:	680b      	ldr	r3, [r1, #0]
 8000a76:	ea36 0303 	bics.w	r3, r6, r3
 8000a7a:	d101      	bne.n	8000a80 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000a7c:	2000      	movs	r0, #0
}
 8000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a80:	1c6b      	adds	r3, r5, #1
 8000a82:	d0f7      	beq.n	8000a74 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a84:	b995      	cbnz	r5, 8000aac <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a86:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000a88:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000a90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a92:	695a      	ldr	r2, [r3, #20]
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000aa0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000aac:	f7ff fb98 	bl	80001e0 <HAL_GetTick>
 8000ab0:	1bc0      	subs	r0, r0, r7
 8000ab2:	4285      	cmp	r5, r0
 8000ab4:	d2dd      	bcs.n	8000a72 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000ab6:	e7e6      	b.n	8000a86 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000ab8 <HAL_UART_Init>:
{
 8000ab8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000aba:	4604      	mov	r4, r0
 8000abc:	b340      	cbz	r0, 8000b10 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000abe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ac2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ac6:	b91b      	cbnz	r3, 8000ad0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000ac8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000acc:	f000 fb12 	bl	80010f4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ad0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000ad2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ad4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ad8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ada:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ae0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ae2:	f7ff ff87 	bl	80009f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ae6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ae8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000aea:	691a      	ldr	r2, [r3, #16]
 8000aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000af8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b00:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000b02:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b04:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000b06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000b0a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000b0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b10:	2001      	movs	r0, #1
}
 8000b12:	bd10      	pop	{r4, pc}

08000b14 <HAL_UART_Transmit>:
{
 8000b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b18:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000b1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000b1e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000b20:	2b20      	cmp	r3, #32
{
 8000b22:	460d      	mov	r5, r1
 8000b24:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000b26:	d14e      	bne.n	8000bc6 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	d049      	beq.n	8000bc0 <HAL_UART_Transmit+0xac>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d047      	beq.n	8000bc0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000b30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d046      	beq.n	8000bc6 <HAL_UART_Transmit+0xb2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000b42:	2321      	movs	r3, #33	; 0x21
 8000b44:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000b48:	f7ff fb4a 	bl	80001e0 <HAL_GetTick>
 8000b4c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000b4e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000b52:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000b56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b96b      	cbnz	r3, 8000b78 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4632      	mov	r2, r6
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	4620      	mov	r0, r4
 8000b64:	f7ff ff80 	bl	8000a68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b68:	b9a8      	cbnz	r0, 8000b96 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000b6a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000b6c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000b70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000b78:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b7a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b82:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b84:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000b8e:	d10e      	bne.n	8000bae <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b90:	f7ff ff6a 	bl	8000a68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000b94:	b110      	cbz	r0, 8000b9c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000b96:	2003      	movs	r0, #3
 8000b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000b9c:	882b      	ldrh	r3, [r5, #0]
 8000b9e:	6822      	ldr	r2, [r4, #0]
 8000ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ba4:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000ba6:	6923      	ldr	r3, [r4, #16]
 8000ba8:	b943      	cbnz	r3, 8000bbc <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000baa:	3502      	adds	r5, #2
 8000bac:	e7d3      	b.n	8000b56 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000bae:	f7ff ff5b 	bl	8000a68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d1ef      	bne.n	8000b96 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	782a      	ldrb	r2, [r5, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	3501      	adds	r5, #1
 8000bbe:	e7ca      	b.n	8000b56 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000bc6:	2002      	movs	r0, #2
}
 8000bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000bcc <HAL_UART_Receive>:
{
 8000bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd0:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8000bd2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000bd6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8000bd8:	2b20      	cmp	r3, #32
{
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8000bde:	d151      	bne.n	8000c84 <HAL_UART_Receive+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d04c      	beq.n	8000c7e <HAL_UART_Receive+0xb2>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d04a      	beq.n	8000c7e <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8000be8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d049      	beq.n	8000c84 <HAL_UART_Receive+0xb8>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000bfa:	2322      	movs	r3, #34	; 0x22
 8000bfc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8000c00:	f7ff faee 	bl	80001e0 <HAL_GetTick>
 8000c04:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8000c06:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000c0a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8000c0e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8000c10:	b280      	uxth	r0, r0
 8000c12:	b930      	cbnz	r0, 8000c22 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8000c14:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000c16:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 8000c1a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8000c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8000c22:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000c24:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c2c:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000c2e:	2120      	movs	r1, #32
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000c34:	4620      	mov	r0, r4
 8000c36:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c38:	d112      	bne.n	8000c60 <HAL_UART_Receive+0x94>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000c3a:	f7ff ff15 	bl	8000a68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c3e:	b110      	cbz	r0, 8000c46 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8000c40:	2003      	movs	r0, #3
 8000c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c46:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000c48:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000c4a:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000c4c:	b922      	cbnz	r2, 8000c58 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c52:	f825 3b02 	strh.w	r3, [r5], #2
 8000c56:	e7da      	b.n	8000c0e <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f825 3b01 	strh.w	r3, [r5], #1
 8000c5e:	e7d6      	b.n	8000c0e <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000c60:	f7ff ff02 	bl	8000a68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d1eb      	bne.n	8000c40 <HAL_UART_Receive+0x74>
 8000c68:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000c6a:	6921      	ldr	r1, [r4, #16]
 8000c6c:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000c6e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000c70:	b911      	cbnz	r1, 8000c78 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000c72:	702b      	strb	r3, [r5, #0]
 8000c74:	4615      	mov	r5, r2
 8000c76:	e7ca      	b.n	8000c0e <HAL_UART_Receive+0x42>
 8000c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c7c:	e7f9      	b.n	8000c72 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1
 8000c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000c84:	2002      	movs	r0, #2
}
 8000c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000c8c <BootLoader_Jump_to_User_APP>:
                               BL_MEM_WRITE,
							   BL_READ_SECTOR_STATUS} ;
/*****************************FUNCTION DEFINITION**************************************/

void BootLoader_Jump_to_User_APP()
{
 8000c8c:	b510      	push	{r4, lr}
	// Pointer to Function to hold the Reset_Handler() of the User Application code
	void (*PF_APP_Reset_handler)(void);

	printmsg("BL_DEBUG_MSG:Bootloader_jump_to_User_Application\r\n");
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <BootLoader_Jump_to_User_APP+0x2c>)
 8000c90:	f000 f962 	bl	8000f58 <printmsg>

	/* 1. Configure the MSP_Value of User application
	 *    by Reading the value of the base address of Sector 2
	 */
	uint32_t user_MSP_value=*(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <BootLoader_Jump_to_User_APP+0x30>)
	printmsg("BL_DEBUG_MSG:User_MSP_Value : %#x\r\n",user_MSP_value);
 8000c96:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <BootLoader_Jump_to_User_APP+0x34>)
	uint32_t user_MSP_value=*(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000c98:	681c      	ldr	r4, [r3, #0]
	printmsg("BL_DEBUG_MSG:User_MSP_Value : %#x\r\n",user_MSP_value);
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	f000 f95c 	bl	8000f58 <printmsg>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ca0:	f384 8808 	msr	MSP, r4

	/* 2. Fetching The Reset Handler address of The User Application
	 * 	  From The Location (FLASH_SECTOR2_BASE_ADDRESS+4)
	 * 	  as it's the second location of the Flash memory
	 */
	uint32_t resetHandler_address=*(volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+4);
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <BootLoader_Jump_to_User_APP+0x38>)

	PF_APP_Reset_handler=(void*)resetHandler_address;

	printmsg("BL_DEBUG_MSG:App_Reset_Handler_Address : %#x\r\n",PF_APP_Reset_handler);
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <BootLoader_Jump_to_User_APP+0x3c>)
	uint32_t resetHandler_address=*(volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+4);
 8000ca8:	681c      	ldr	r4, [r3, #0]
	printmsg("BL_DEBUG_MSG:App_Reset_Handler_Address : %#x\r\n",PF_APP_Reset_handler);
 8000caa:	4621      	mov	r1, r4
 8000cac:	f000 f954 	bl	8000f58 <printmsg>

	/* 3. Jump to Reset Handler of The User_Application */
	PF_APP_Reset_handler();
 8000cb0:	4623      	mov	r3, r4
}
 8000cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PF_APP_Reset_handler();
 8000cb6:	4718      	bx	r3
 8000cb8:	08001c2a 	.word	0x08001c2a
 8000cbc:	08008000 	.word	0x08008000
 8000cc0:	08001c5d 	.word	0x08001c5d
 8000cc4:	08008004 	.word	0x08008004
 8000cc8:	08001c81 	.word	0x08001c81

08000ccc <BootLoader_Send_ACK>:
	/* Here We Send Two Bytes
	 * 1st Byte is ACK
	 * 2nd Byte is The Length of The Coming Reply
	 */
	uint8_t ACK_buffer[2];
	ACK_buffer[0]= BL_ACK;
 8000ccc:	23a5      	movs	r3, #165	; 0xa5
{
 8000cce:	b507      	push	{r0, r1, r2, lr}
	ACK_buffer[1]= length_of_reply;
	HAL_UART_Transmit(C_UART,ACK_buffer,2,HAL_MAX_DELAY);
 8000cd0:	2202      	movs	r2, #2
	ACK_buffer[0]= BL_ACK;
 8000cd2:	f88d 3004 	strb.w	r3, [sp, #4]
	ACK_buffer[1]= length_of_reply;
 8000cd6:	f88d 1005 	strb.w	r1, [sp, #5]
	HAL_UART_Transmit(C_UART,ACK_buffer,2,HAL_MAX_DELAY);
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	a901      	add	r1, sp, #4
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <BootLoader_Send_ACK+0x20>)
 8000ce2:	f7ff ff17 	bl	8000b14 <HAL_UART_Transmit>
}
 8000ce6:	b003      	add	sp, #12
 8000ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cec:	20000174 	.word	0x20000174

08000cf0 <BootLoader_Send_NACK>:

/* This Function sends NACK if CRC doesn't Matches */
void BootLoader_Send_NACK(void)
{
	uint8_t NACK_buffer=BL_NACK;
 8000cf0:	237f      	movs	r3, #127	; 0x7f
{
 8000cf2:	b507      	push	{r0, r1, r2, lr}
	uint8_t NACK_buffer=BL_NACK;
 8000cf4:	a902      	add	r1, sp, #8
 8000cf6:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_UART_Transmit(C_UART,&NACK_buffer,1,HAL_MAX_DELAY);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <BootLoader_Send_NACK+0x1c>)
 8000d02:	f7ff ff07 	bl	8000b14 <HAL_UART_Transmit>
}
 8000d06:	b003      	add	sp, #12
 8000d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d0c:	20000174 	.word	0x20000174

08000d10 <BootLoader_Verify_CRC>:

uint8_t BootLoader_Verify_CRC(uint8_t *pData ,uint32_t length ,uint32_t CRC_Host)
{
 8000d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d12:	4604      	mov	r4, r0
 8000d14:	1846      	adds	r6, r0, r1
 8000d16:	4615      	mov	r5, r2
	uint32_t uwCRCValue=0xFF;
 8000d18:	20ff      	movs	r0, #255	; 0xff
	for(uint32_t i=0 ; i<length ; i++)
	{
		// Convert Data from uint8_t to uint32_t
		uint32_t iData=pData[i];
		//Accumulate The CRC for each iteration of pData bytes
		uwCRCValue=HAL_CRC_Accumulate(&hcrc,&iData,1);
 8000d1a:	4f08      	ldr	r7, [pc, #32]	; (8000d3c <BootLoader_Verify_CRC+0x2c>)
	for(uint32_t i=0 ; i<length ; i++)
 8000d1c:	42b4      	cmp	r4, r6
 8000d1e:	d104      	bne.n	8000d2a <BootLoader_Verify_CRC+0x1a>
	}
	else
	{
		return VERIFY_CRC_FAIL;
	}
}
 8000d20:	1b40      	subs	r0, r0, r5
 8000d22:	bf18      	it	ne
 8000d24:	2001      	movne	r0, #1
 8000d26:	b003      	add	sp, #12
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint32_t iData=pData[i];
 8000d2a:	f814 3b01 	ldrb.w	r3, [r4], #1
		uwCRCValue=HAL_CRC_Accumulate(&hcrc,&iData,1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	4638      	mov	r0, r7
		uint32_t iData=pData[i];
 8000d34:	9301      	str	r3, [sp, #4]
		uwCRCValue=HAL_CRC_Accumulate(&hcrc,&iData,1);
 8000d36:	f7ff fac5 	bl	80002c4 <HAL_CRC_Accumulate>
 8000d3a:	e7ef      	b.n	8000d1c <BootLoader_Verify_CRC+0xc>
 8000d3c:	2000016c 	.word	0x2000016c

08000d40 <BootLoader_UART_Write_Data>:
	return (uint8_t)BL_VERSION;
}

void BootLoader_UART_Write_Data(uint8_t *pbuffer, uint32_t length)
{
	HAL_UART_Transmit(C_UART,pbuffer,length,HAL_MAX_DELAY);
 8000d40:	b28a      	uxth	r2, r1
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	4601      	mov	r1, r0
 8000d48:	4801      	ldr	r0, [pc, #4]	; (8000d50 <BootLoader_UART_Write_Data+0x10>)
 8000d4a:	f7ff bee3 	b.w	8000b14 <HAL_UART_Transmit>
 8000d4e:	bf00      	nop
 8000d50:	20000174 	.word	0x20000174

08000d54 <BL_hanlde_getVersion_cmd>:
	return  chip_id;

}
/***************Implementation of Bootloader Command Handle Function*******************/
void BL_hanlde_getVersion_cmd(uint8_t* pbuffer)
{
 8000d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d56:	4604      	mov	r4, r0
	uint8_t BL_Version;
	uint8_t BL_length_to_follow = pbuffer[0]; // length Segment in The command Packet
 8000d58:	7805      	ldrb	r5, [r0, #0]
	uint8_t BL_command_code = pbuffer[1];
 8000d5a:	7846      	ldrb	r6, [r0, #1]

	printmsg("BL_DEBUG_MSG: BL_hanlde_getVersion_cmd\r\n");
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <BL_hanlde_getVersion_cmd+0x50>)
 8000d5e:	f000 f8fb 	bl	8000f58 <printmsg>
	uint32_t command_Packet_length = BL_length_to_follow + BL_LENGTH_TO_FOLLOW_SEG_SIZE ;

	// Extract CRC_32 word sent by The Host

	//CRC_Host Contains The Data of The beginning of BL_CRC_SEG till the end of The command Packet
	uint32_t CRC_Host = * ((uint32_t*) (pbuffer+command_Packet_length-BL_CRC_SEG_SIZE) );
 8000d62:	1ee9      	subs	r1, r5, #3

	if(! BootLoader_Verify_CRC(&pbuffer[0],command_Packet_length-BL_CRC_SEG_SIZE,CRC_Host))
 8000d64:	5862      	ldr	r2, [r4, r1]
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff ffd2 	bl	8000d10 <BootLoader_Verify_CRC>
 8000d6c:	b9a0      	cbnz	r0, 8000d98 <BL_hanlde_getVersion_cmd+0x44>
	{
		// Checksum is Correct
		printmsg("BL_DEBUG_MSG: Checksum Success !!\r\n");
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <BL_hanlde_getVersion_cmd+0x54>)
 8000d70:	f000 f8f2 	bl	8000f58 <printmsg>
		BootLoader_Send_ACK(BL_command_code,BL_VERSION_REPLY_SIZE);
 8000d74:	2101      	movs	r1, #1
 8000d76:	4630      	mov	r0, r6
 8000d78:	f7ff ffa8 	bl	8000ccc <BootLoader_Send_ACK>
		// 2. Get The BootLoader Version
		BL_Version = BootLoader_get_Version();
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	ac02      	add	r4, sp, #8
 8000d80:	f804 2d01 	strb.w	r2, [r4, #-1]!
		printmsg("BL_DEBUG_MSG: BL_Version: %d	%#x\r\n",BL_Version,BL_Version);
 8000d84:	4611      	mov	r1, r2
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <BL_hanlde_getVersion_cmd+0x58>)
 8000d88:	f000 f8e6 	bl	8000f58 <printmsg>
		// 3. Send The BootLooder Version via C_UART
		BootLoader_UART_Write_Data(&BL_Version,1);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f7ff ffd6 	bl	8000d40 <BootLoader_UART_Write_Data>
	{
		// 2. Checksum is Wrong , Send NACK
		printmsg("BL_DEBUG_MSG: Checksum FAIL !!\r\n");
		BootLoader_Send_NACK();
	}
}
 8000d94:	b002      	add	sp, #8
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
		printmsg("BL_DEBUG_MSG: Checksum FAIL !!\r\n");
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <BL_hanlde_getVersion_cmd+0x5c>)
 8000d9a:	f000 f8dd 	bl	8000f58 <printmsg>
		BootLoader_Send_NACK();
 8000d9e:	f7ff ffa7 	bl	8000cf0 <BootLoader_Send_NACK>
}
 8000da2:	e7f7      	b.n	8000d94 <BL_hanlde_getVersion_cmd+0x40>
 8000da4:	08001b99 	.word	0x08001b99
 8000da8:	08001bc2 	.word	0x08001bc2
 8000dac:	08001be6 	.word	0x08001be6
 8000db0:	08001c09 	.word	0x08001c09

08000db4 <BL_hanlde_getHelp_cmd>:
void BL_hanlde_getHelp_cmd(uint8_t* pbuffer)
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	4604      	mov	r4, r0
	uint8_t BL_length_to_follow = pbuffer[0]; // length Segment in The command Packet
 8000db8:	7805      	ldrb	r5, [r0, #0]
	uint8_t BL_command_code = pbuffer[1];
 8000dba:	7846      	ldrb	r6, [r0, #1]

	printmsg("BL_DEBUG_MSG: BL_hanlde_getHelp_cmd\r\n");
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <BL_hanlde_getHelp_cmd+0x44>)
 8000dbe:	f000 f8cb 	bl	8000f58 <printmsg>
	uint32_t command_Packet_length = BL_length_to_follow + BL_LENGTH_TO_FOLLOW_SEG_SIZE ;

	// Extract CRC_32 word sent by The Host

	//CRC_Host Contains The Data of The beginning of BL_CRC_SEG till the end of The command Packet
	uint32_t CRC_Host = * ((volatile uint32_t*) (pbuffer+command_Packet_length-BL_CRC_SEG_SIZE) );
 8000dc2:	1ee9      	subs	r1, r5, #3
 8000dc4:	5862      	ldr	r2, [r4, r1]

	if(! BootLoader_Verify_CRC(&pbuffer[0],command_Packet_length-BL_CRC_SEG_SIZE,CRC_Host))
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff ffa2 	bl	8000d10 <BootLoader_Verify_CRC>
 8000dcc:	b960      	cbnz	r0, 8000de8 <BL_hanlde_getHelp_cmd+0x34>
	{
		// Checksum is Correct
		printmsg("BL_DEBUG_MSG: Checksum Success !!\r\n");
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <BL_hanlde_getHelp_cmd+0x48>)
 8000dd0:	f000 f8c2 	bl	8000f58 <printmsg>
		BootLoader_Send_ACK(BL_command_code,sizeof(supported_commands));
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	f7ff ff78 	bl	8000ccc <BootLoader_Send_ACK>
	{
		// 2. Checksum is Wrong , Send NACK
		printmsg("BL_DEBUG_MSG: Checksum FAIL !!\r\n");
		BootLoader_Send_NACK();
	}
}
 8000ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BootLoader_UART_Write_Data(supported_commands,sizeof(supported_commands) );
 8000de0:	2108      	movs	r1, #8
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <BL_hanlde_getHelp_cmd+0x4c>)
 8000de4:	f7ff bfac 	b.w	8000d40 <BootLoader_UART_Write_Data>
		printmsg("BL_DEBUG_MSG: Checksum FAIL !!\r\n");
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <BL_hanlde_getHelp_cmd+0x50>)
 8000dea:	f000 f8b5 	bl	8000f58 <printmsg>
}
 8000dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BootLoader_Send_NACK();
 8000df2:	f7ff bf7d 	b.w	8000cf0 <BootLoader_Send_NACK>
 8000df6:	bf00      	nop
 8000df8:	08001b73 	.word	0x08001b73
 8000dfc:	08001bc2 	.word	0x08001bc2
 8000e00:	20000008 	.word	0x20000008
 8000e04:	08001c09 	.word	0x08001c09

08000e08 <BL_hanlde_getCID_cmd>:
void BL_hanlde_getCID_cmd(uint8_t* pbuffer)
{
	uint16_t BL_chipID=0;
 8000e08:	2300      	movs	r3, #0
{
 8000e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e0c:	4604      	mov	r4, r0
	uint8_t BL_length_to_follow = pbuffer[0]; // length Segment in The command Packet
 8000e0e:	7805      	ldrb	r5, [r0, #0]
	uint8_t BL_command_code = pbuffer[1];
 8000e10:	7846      	ldrb	r6, [r0, #1]

	printmsg("BL_DEBUG_MSG: BL_hanlde_getCID_cmd\r\n");
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <BL_hanlde_getCID_cmd+0x5c>)
	uint16_t BL_chipID=0;
 8000e14:	f8ad 3006 	strh.w	r3, [sp, #6]
	printmsg("BL_DEBUG_MSG: BL_hanlde_getCID_cmd\r\n");
 8000e18:	f000 f89e 	bl	8000f58 <printmsg>
	uint32_t command_Packet_length = BL_length_to_follow + BL_LENGTH_TO_FOLLOW_SEG_SIZE ;

	// Extract CRC_32 word sent by The Host

	//CRC_Host Contains The Data of The beginning of BL_CRC_SEG till the end of The command Packet
	uint32_t CRC_Host = * ((uint32_t*) (pbuffer+command_Packet_length-BL_CRC_SEG_SIZE) );
 8000e1c:	1ee9      	subs	r1, r5, #3

	if(! BootLoader_Verify_CRC(&pbuffer[0],command_Packet_length-BL_CRC_SEG_SIZE,CRC_Host))
 8000e1e:	5862      	ldr	r2, [r4, r1]
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff ff75 	bl	8000d10 <BootLoader_Verify_CRC>
 8000e26:	b9b8      	cbnz	r0, 8000e58 <BL_hanlde_getCID_cmd+0x50>
	{
		// Checksum is Correct
		printmsg("BL_DEBUG_MSG: Checksum Success !!\r\n");
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <BL_hanlde_getCID_cmd+0x60>)
 8000e2a:	f000 f895 	bl	8000f58 <printmsg>
		BootLoader_Send_ACK(BL_command_code,BL_CID_REPLY_SIZE);
 8000e2e:	2102      	movs	r1, #2
 8000e30:	4630      	mov	r0, r6
 8000e32:	f7ff ff4b 	bl	8000ccc <BootLoader_Send_ACK>
	chip_id = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <BL_hanlde_getCID_cmd+0x64>)
		// 2. Get chip ID
		BL_chipID = get_MCU_ID_Code();
 8000e38:	ac02      	add	r4, sp, #8
	chip_id = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000e3a:	681a      	ldr	r2, [r3, #0]
		printmsg("BL_DEBUG_MSG: BL_chipID: %d	%#x\r\n",BL_chipID,BL_chipID);
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <BL_hanlde_getCID_cmd+0x68>)
	chip_id = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000e3e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		BL_chipID = get_MCU_ID_Code();
 8000e42:	f824 2d02 	strh.w	r2, [r4, #-2]!
		printmsg("BL_DEBUG_MSG: BL_chipID: %d	%#x\r\n",BL_chipID,BL_chipID);
 8000e46:	4611      	mov	r1, r2
 8000e48:	f000 f886 	bl	8000f58 <printmsg>
		// 3. Send The Chip ID via C_UART
		BootLoader_UART_Write_Data( (uint8_t*) &BL_chipID,BL_CID_REPLY_SIZE);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff ff76 	bl	8000d40 <BootLoader_UART_Write_Data>
		// 2. Checksum is Wrong , Send NACK
		printmsg("BL_DEBUG_MSG: Checksum FAIL !!\r\n");
		BootLoader_Send_NACK();
	}

}
 8000e54:	b002      	add	sp, #8
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
		printmsg("BL_DEBUG_MSG: Checksum FAIL !!\r\n");
 8000e58:	4806      	ldr	r0, [pc, #24]	; (8000e74 <BL_hanlde_getCID_cmd+0x6c>)
 8000e5a:	f000 f87d 	bl	8000f58 <printmsg>
		BootLoader_Send_NACK();
 8000e5e:	f7ff ff47 	bl	8000cf0 <BootLoader_Send_NACK>
}
 8000e62:	e7f7      	b.n	8000e54 <BL_hanlde_getCID_cmd+0x4c>
 8000e64:	08001b2c 	.word	0x08001b2c
 8000e68:	08001bc2 	.word	0x08001bc2
 8000e6c:	e0042000 	.word	0xe0042000
 8000e70:	08001b51 	.word	0x08001b51
 8000e74:	08001c09 	.word	0x08001c09

08000e78 <BootLoader_UART_Read_Host_CMD>:
{
 8000e78:	b570      	push	{r4, r5, r6, lr}
		memset(BL_rx_buffer,0,BL_RX_LEN);
 8000e7a:	4c20      	ldr	r4, [pc, #128]	; (8000efc <BootLoader_UART_Read_Host_CMD+0x84>)
		HAL_UART_Receive(C_UART,BL_rx_buffer,1,HAL_MAX_DELAY);
 8000e7c:	4d20      	ldr	r5, [pc, #128]	; (8000f00 <BootLoader_UART_Read_Host_CMD+0x88>)
		HAL_UART_Receive(C_UART,&BL_rx_buffer[1],BL_rcv_len,HAL_MAX_DELAY);
 8000e7e:	1c66      	adds	r6, r4, #1
		memset(BL_rx_buffer,0,BL_RX_LEN);
 8000e80:	22c8      	movs	r2, #200	; 0xc8
 8000e82:	2100      	movs	r1, #0
 8000e84:	481d      	ldr	r0, [pc, #116]	; (8000efc <BootLoader_UART_Read_Host_CMD+0x84>)
 8000e86:	f000 fa0b 	bl	80012a0 <memset>
		HAL_UART_Receive(C_UART,BL_rx_buffer,1,HAL_MAX_DELAY);
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	2201      	movs	r2, #1
 8000e90:	491a      	ldr	r1, [pc, #104]	; (8000efc <BootLoader_UART_Read_Host_CMD+0x84>)
 8000e92:	4628      	mov	r0, r5
 8000e94:	f7ff fe9a 	bl	8000bcc <HAL_UART_Receive>
		HAL_UART_Receive(C_UART,&BL_rx_buffer[1],BL_rcv_len,HAL_MAX_DELAY);
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	7822      	ldrb	r2, [r4, #0]
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff fe93 	bl	8000bcc <HAL_UART_Receive>
		switch(BL_cmd_code)
 8000ea6:	7863      	ldrb	r3, [r4, #1]
 8000ea8:	3b51      	subs	r3, #81	; 0x51
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	d822      	bhi.n	8000ef4 <BootLoader_UART_Read_Host_CMD+0x7c>
 8000eae:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <BootLoader_UART_Read_Host_CMD+0x3c>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	08000ee5 	.word	0x08000ee5
 8000ebc:	08000eed 	.word	0x08000eed
 8000ec0:	08000e81 	.word	0x08000e81
 8000ec4:	08000e81 	.word	0x08000e81
 8000ec8:	08000e81 	.word	0x08000e81
 8000ecc:	08000e81 	.word	0x08000e81
 8000ed0:	08000ef5 	.word	0x08000ef5
 8000ed4:	08000e81 	.word	0x08000e81
 8000ed8:	08000e81 	.word	0x08000e81
				BL_hanlde_getVersion_cmd(BL_rx_buffer);
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff ff39 	bl	8000d54 <BL_hanlde_getVersion_cmd>
				break;
 8000ee2:	e7cd      	b.n	8000e80 <BootLoader_UART_Read_Host_CMD+0x8>
				BL_hanlde_getHelp_cmd(BL_rx_buffer);
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff ff65 	bl	8000db4 <BL_hanlde_getHelp_cmd>
				break;
 8000eea:	e7c9      	b.n	8000e80 <BootLoader_UART_Read_Host_CMD+0x8>
				BL_hanlde_getCID_cmd(BL_rx_buffer);
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff ff8b 	bl	8000e08 <BL_hanlde_getCID_cmd>
				break;
 8000ef2:	e7c5      	b.n	8000e80 <BootLoader_UART_Read_Host_CMD+0x8>
				printmsg("BL_DEBUG_MSG: INVALID COMMAND CODE RECEIVED FROM THE HOST\r\n");
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <BootLoader_UART_Read_Host_CMD+0x8c>)
 8000ef6:	f000 f82f 	bl	8000f58 <printmsg>
 8000efa:	e7c1      	b.n	8000e80 <BootLoader_UART_Read_Host_CMD+0x8>
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	20000174 	.word	0x20000174
 8000f04:	08001cb0 	.word	0x08001cb0

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0c:	2228      	movs	r2, #40	; 0x28
 8000f0e:	2100      	movs	r1, #0
 8000f10:	a806      	add	r0, sp, #24
 8000f12:	f000 f9c5 	bl	80012a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f16:	2214      	movs	r2, #20
 8000f18:	2100      	movs	r1, #0
 8000f1a:	a801      	add	r0, sp, #4
 8000f1c:	f000 f9c0 	bl	80012a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f24:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f26:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f2a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f30:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f32:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f36:	f7ff fac5 	bl	80004c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f44:	4621      	mov	r1, r4
 8000f46:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f48:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f50:	f7ff fc92 	bl	8000878 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f54:	b010      	add	sp, #64	; 0x40
 8000f56:	bd10      	pop	{r4, pc}

08000f58 <printmsg>:

/* USER CODE BEGIN 4 */

/* Print Formatted string to console over UART */
void printmsg(char *format,...)
{
 8000f58:	b40f      	push	{r0, r1, r2, r3}
 8000f5a:	b500      	push	{lr}
 8000f5c:	b097      	sub	sp, #92	; 0x5c
 8000f5e:	aa18      	add	r2, sp, #96	; 0x60
 8000f60:	f852 1b04 	ldr.w	r1, [r2], #4
	char str[80];

	/* Extract the arguments list using VA APIs */
	va_list args;
	va_start(args,format);
	vsprintf(str,format,args);
 8000f64:	a802      	add	r0, sp, #8
	va_start(args,format);
 8000f66:	9201      	str	r2, [sp, #4]
	vsprintf(str,format,args);
 8000f68:	f000 f9ba 	bl	80012e0 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000f6c:	a802      	add	r0, sp, #8
 8000f6e:	f7ff f8ed 	bl	800014c <strlen>
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	b282      	uxth	r2, r0
 8000f78:	a902      	add	r1, sp, #8
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <printmsg+0x34>)
 8000f7c:	f7ff fdca 	bl	8000b14 <HAL_UART_Transmit>
	va_end(args);

#endif
}
 8000f80:	b017      	add	sp, #92	; 0x5c
 8000f82:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f86:	b004      	add	sp, #16
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000174 	.word	0x20000174

08000f90 <main>:
{
 8000f90:	b500      	push	{lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000f94:	f7ff f906 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000f98:	f7ff ffb6 	bl	8000f08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	eb0d 0002 	add.w	r0, sp, r2
 8000fa4:	f000 f97c 	bl	80012a0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <main+0xd4>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fb0:	482d      	ldr	r0, [pc, #180]	; (8001068 <main+0xd8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	f042 0210 	orr.w	r2, r2, #16
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	f002 0210 	and.w	r2, r2, #16
 8000fc0:	9201      	str	r2, [sp, #4]
 8000fc2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	f042 0208 	orr.w	r2, r2, #8
 8000fcc:	619a      	str	r2, [r3, #24]
 8000fce:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = Button_Pin;
 8000fd0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	f002 0208 	and.w	r2, r2, #8
 8000fd8:	9202      	str	r2, [sp, #8]
 8000fda:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	f042 0204 	orr.w	r2, r2, #4
 8000fe2:	619a      	str	r2, [r3, #24]
 8000fe4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ff0:	f7ff fa62 	bl	80004b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	a904      	add	r1, sp, #16
 8000ffe:	481a      	ldr	r0, [pc, #104]	; (8001068 <main+0xd8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001006:	f7ff f96f 	bl	80002e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800100a:	a904      	add	r1, sp, #16
 800100c:	4817      	ldr	r0, [pc, #92]	; (800106c <main+0xdc>)
  GPIO_InitStruct.Pin = Button_Pin;
 800100e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001012:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001014:	f7ff f968 	bl	80002e8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <main+0xe0>)
 800101a:	4816      	ldr	r0, [pc, #88]	; (8001074 <main+0xe4>)
 800101c:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800101e:	f7ff f941 	bl	80002a4 <HAL_CRC_Init>
  huart1.Init.BaudRate = 115200;
 8001022:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <main+0xe8>)
  huart1.Init.BaudRate = 115200;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <main+0xec>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800102c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001030:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001032:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001034:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001036:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001038:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800103a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103c:	f7ff fd3c 	bl	8000ab8 <HAL_UART_Init>
  if(HAL_GPIO_ReadPin(GPIOB,Button_Pin)== GPIO_PIN_RESET)
 8001040:	4629      	mov	r1, r5
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <main+0xdc>)
 8001044:	f7ff fa32 	bl	80004ac <HAL_GPIO_ReadPin>
 8001048:	b928      	cbnz	r0, 8001056 <main+0xc6>
	  printmsg("BL_DEBUG_MSG:Button is pressed .. Going to Bootloader Mode\r\n");
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <main+0xf0>)
 800104c:	f7ff ff84 	bl	8000f58 <printmsg>
	  BootLoader_UART_Read_Host_CMD();
 8001050:	f7ff ff12 	bl	8000e78 <BootLoader_UART_Read_Host_CMD>
 8001054:	e7fe      	b.n	8001054 <main+0xc4>
	  printmsg("BL_DEBUG_MSG:Button is not pressed .. Executing user Mode\r\n");
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <main+0xf4>)
 8001058:	f7ff ff7e 	bl	8000f58 <printmsg>
	  BootLoader_Jump_to_User_APP();
 800105c:	f7ff fe16 	bl	8000c8c <BootLoader_Jump_to_User_APP>
 8001060:	e7f8      	b.n	8001054 <main+0xc4>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	40011000 	.word	0x40011000
 800106c:	40010c00 	.word	0x40010c00
 8001070:	40023000 	.word	0x40023000
 8001074:	2000016c 	.word	0x2000016c
 8001078:	20000174 	.word	0x20000174
 800107c:	40013800 	.word	0x40013800
 8001080:	08001cec 	.word	0x08001cec
 8001084:	08001d29 	.word	0x08001d29

08001088 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_MspInit+0x3c>)
{
 800108a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	f002 0201 	and.w	r2, r2, #1
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b2:	6853      	ldr	r3, [r2, #4]
 80010b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	b002      	add	sp, #8
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000

080010cc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80010cc:	6802      	ldr	r2, [r0, #0]
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_CRC_MspInit+0x24>)
{
 80010d0:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d10a      	bne.n	80010ec <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010d6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010ec:	b002      	add	sp, #8
 80010ee:	4770      	bx	lr
 80010f0:	40023000 	.word	0x40023000

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4604      	mov	r4, r0
 80010f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	2210      	movs	r2, #16
 80010fc:	2100      	movs	r1, #0
 80010fe:	a802      	add	r0, sp, #8
 8001100:	f000 f8ce 	bl	80012a0 <memset>
  if(huart->Instance==USART1)
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_UART_MspInit+0x70>)
 8001108:	429a      	cmp	r2, r3
 800110a:	d128      	bne.n	800115e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001110:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001118:	619a      	str	r2, [r3, #24]
 800111a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800111e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	f042 0204 	orr.w	r2, r2, #4
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f7ff f8cf 	bl	80002e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800114a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	a902      	add	r1, sp, #8
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f7ff f8c5 	bl	80002e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800115e:	b006      	add	sp, #24
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	40013800 	.word	0x40013800
 8001168:	40010800 	.word	0x40010800

0800116c <NMI_Handler>:
 800116c:	4770      	bx	lr

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	e7fe      	b.n	800116e <HardFault_Handler>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler>

08001176 <SVC_Handler>:
 8001176:	4770      	bx	lr

08001178 <DebugMon_Handler>:
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f7ff b824 	b.w	80001c8 <HAL_IncTick>

08001180 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001180:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <_sbrk+0x2c>)
{
 8001184:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	b909      	cbnz	r1, 800118e <_sbrk+0xe>
		heap_end = &end;
 800118a:	4909      	ldr	r1, [pc, #36]	; (80011b0 <_sbrk+0x30>)
 800118c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800118e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001190:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001192:	4402      	add	r2, r0
 8001194:	428a      	cmp	r2, r1
 8001196:	d906      	bls.n	80011a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001198:	f000 f858 	bl	800124c <__errno>
 800119c:	230c      	movs	r3, #12
 800119e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80011a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80011a8:	bd08      	pop	{r3, pc}
 80011aa:	bf00      	nop
 80011ac:	20000094 	.word	0x20000094
 80011b0:	200001b8 	.word	0x200001b8

080011b4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <SystemInit+0x40>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <SystemInit+0x44>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011d0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011e0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <SystemInit+0x48>)
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	f8ff0000 	.word	0xf8ff0000
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001200:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001202:	e003      	b.n	800120c <LoopCopyDataInit>

08001204 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001206:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001208:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800120a:	3104      	adds	r1, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001210:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001212:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001214:	d3f6      	bcc.n	8001204 <CopyDataInit>
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001218:	e002      	b.n	8001220 <LoopFillZerobss>

0800121a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800121c:	f842 3b04 	str.w	r3, [r2], #4

08001220 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001224:	d3f9      	bcc.n	800121a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001226:	f7ff ffc5 	bl	80011b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f000 f815 	bl	8001258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122e:	f7ff feaf 	bl	8000f90 <main>
  bx lr
 8001232:	4770      	bx	lr
  ldr r3, =_sidata
 8001234:	08001db8 	.word	0x08001db8
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800123c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001240:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001244:	200001b8 	.word	0x200001b8

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>
	...

0800124c <__errno>:
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <__errno+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000014 	.word	0x20000014

08001258 <__libc_init_array>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	2500      	movs	r5, #0
 800125c:	4e0c      	ldr	r6, [pc, #48]	; (8001290 <__libc_init_array+0x38>)
 800125e:	4c0d      	ldr	r4, [pc, #52]	; (8001294 <__libc_init_array+0x3c>)
 8001260:	1ba4      	subs	r4, r4, r6
 8001262:	10a4      	asrs	r4, r4, #2
 8001264:	42a5      	cmp	r5, r4
 8001266:	d109      	bne.n	800127c <__libc_init_array+0x24>
 8001268:	f000 fc4c 	bl	8001b04 <_init>
 800126c:	2500      	movs	r5, #0
 800126e:	4e0a      	ldr	r6, [pc, #40]	; (8001298 <__libc_init_array+0x40>)
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <__libc_init_array+0x44>)
 8001272:	1ba4      	subs	r4, r4, r6
 8001274:	10a4      	asrs	r4, r4, #2
 8001276:	42a5      	cmp	r5, r4
 8001278:	d105      	bne.n	8001286 <__libc_init_array+0x2e>
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001280:	4798      	blx	r3
 8001282:	3501      	adds	r5, #1
 8001284:	e7ee      	b.n	8001264 <__libc_init_array+0xc>
 8001286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800128a:	4798      	blx	r3
 800128c:	3501      	adds	r5, #1
 800128e:	e7f2      	b.n	8001276 <__libc_init_array+0x1e>
 8001290:	08001db0 	.word	0x08001db0
 8001294:	08001db0 	.word	0x08001db0
 8001298:	08001db0 	.word	0x08001db0
 800129c:	08001db4 	.word	0x08001db4

080012a0 <memset>:
 80012a0:	4603      	mov	r3, r0
 80012a2:	4402      	add	r2, r0
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d100      	bne.n	80012aa <memset+0xa>
 80012a8:	4770      	bx	lr
 80012aa:	f803 1b01 	strb.w	r1, [r3], #1
 80012ae:	e7f9      	b.n	80012a4 <memset+0x4>

080012b0 <_vsiprintf_r>:
 80012b0:	b510      	push	{r4, lr}
 80012b2:	b09a      	sub	sp, #104	; 0x68
 80012b4:	9100      	str	r1, [sp, #0]
 80012b6:	9104      	str	r1, [sp, #16]
 80012b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80012bc:	9102      	str	r1, [sp, #8]
 80012be:	9105      	str	r1, [sp, #20]
 80012c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012c4:	f44f 7402 	mov.w	r4, #520	; 0x208
 80012c8:	f8ad 100e 	strh.w	r1, [sp, #14]
 80012cc:	4669      	mov	r1, sp
 80012ce:	f8ad 400c 	strh.w	r4, [sp, #12]
 80012d2:	f000 f86b 	bl	80013ac <_svfiprintf_r>
 80012d6:	2200      	movs	r2, #0
 80012d8:	9b00      	ldr	r3, [sp, #0]
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	b01a      	add	sp, #104	; 0x68
 80012de:	bd10      	pop	{r4, pc}

080012e0 <vsiprintf>:
 80012e0:	4613      	mov	r3, r2
 80012e2:	460a      	mov	r2, r1
 80012e4:	4601      	mov	r1, r0
 80012e6:	4802      	ldr	r0, [pc, #8]	; (80012f0 <vsiprintf+0x10>)
 80012e8:	6800      	ldr	r0, [r0, #0]
 80012ea:	f7ff bfe1 	b.w	80012b0 <_vsiprintf_r>
 80012ee:	bf00      	nop
 80012f0:	20000014 	.word	0x20000014

080012f4 <__ssputs_r>:
 80012f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f8:	688e      	ldr	r6, [r1, #8]
 80012fa:	4682      	mov	sl, r0
 80012fc:	429e      	cmp	r6, r3
 80012fe:	460c      	mov	r4, r1
 8001300:	4691      	mov	r9, r2
 8001302:	4698      	mov	r8, r3
 8001304:	d835      	bhi.n	8001372 <__ssputs_r+0x7e>
 8001306:	898a      	ldrh	r2, [r1, #12]
 8001308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800130c:	d031      	beq.n	8001372 <__ssputs_r+0x7e>
 800130e:	2302      	movs	r3, #2
 8001310:	6825      	ldr	r5, [r4, #0]
 8001312:	6909      	ldr	r1, [r1, #16]
 8001314:	1a6f      	subs	r7, r5, r1
 8001316:	6965      	ldr	r5, [r4, #20]
 8001318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800131c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001320:	f108 0301 	add.w	r3, r8, #1
 8001324:	443b      	add	r3, r7
 8001326:	429d      	cmp	r5, r3
 8001328:	bf38      	it	cc
 800132a:	461d      	movcc	r5, r3
 800132c:	0553      	lsls	r3, r2, #21
 800132e:	d531      	bpl.n	8001394 <__ssputs_r+0xa0>
 8001330:	4629      	mov	r1, r5
 8001332:	f000 fb47 	bl	80019c4 <_malloc_r>
 8001336:	4606      	mov	r6, r0
 8001338:	b950      	cbnz	r0, 8001350 <__ssputs_r+0x5c>
 800133a:	230c      	movs	r3, #12
 800133c:	f8ca 3000 	str.w	r3, [sl]
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	f04f 30ff 	mov.w	r0, #4294967295
 8001346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	463a      	mov	r2, r7
 8001352:	6921      	ldr	r1, [r4, #16]
 8001354:	f000 fac4 	bl	80018e0 <memcpy>
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	81a3      	strh	r3, [r4, #12]
 8001364:	6126      	str	r6, [r4, #16]
 8001366:	443e      	add	r6, r7
 8001368:	6026      	str	r6, [r4, #0]
 800136a:	4646      	mov	r6, r8
 800136c:	6165      	str	r5, [r4, #20]
 800136e:	1bed      	subs	r5, r5, r7
 8001370:	60a5      	str	r5, [r4, #8]
 8001372:	4546      	cmp	r6, r8
 8001374:	bf28      	it	cs
 8001376:	4646      	movcs	r6, r8
 8001378:	4649      	mov	r1, r9
 800137a:	4632      	mov	r2, r6
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	f000 faba 	bl	80018f6 <memmove>
 8001382:	68a3      	ldr	r3, [r4, #8]
 8001384:	2000      	movs	r0, #0
 8001386:	1b9b      	subs	r3, r3, r6
 8001388:	60a3      	str	r3, [r4, #8]
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	441e      	add	r6, r3
 800138e:	6026      	str	r6, [r4, #0]
 8001390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001394:	462a      	mov	r2, r5
 8001396:	f000 fb73 	bl	8001a80 <_realloc_r>
 800139a:	4606      	mov	r6, r0
 800139c:	2800      	cmp	r0, #0
 800139e:	d1e1      	bne.n	8001364 <__ssputs_r+0x70>
 80013a0:	6921      	ldr	r1, [r4, #16]
 80013a2:	4650      	mov	r0, sl
 80013a4:	f000 fac2 	bl	800192c <_free_r>
 80013a8:	e7c7      	b.n	800133a <__ssputs_r+0x46>
	...

080013ac <_svfiprintf_r>:
 80013ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b0:	b09d      	sub	sp, #116	; 0x74
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	898b      	ldrh	r3, [r1, #12]
 80013b6:	4680      	mov	r8, r0
 80013b8:	061c      	lsls	r4, r3, #24
 80013ba:	460d      	mov	r5, r1
 80013bc:	4616      	mov	r6, r2
 80013be:	d50f      	bpl.n	80013e0 <_svfiprintf_r+0x34>
 80013c0:	690b      	ldr	r3, [r1, #16]
 80013c2:	b96b      	cbnz	r3, 80013e0 <_svfiprintf_r+0x34>
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	f000 fafd 	bl	80019c4 <_malloc_r>
 80013ca:	6028      	str	r0, [r5, #0]
 80013cc:	6128      	str	r0, [r5, #16]
 80013ce:	b928      	cbnz	r0, 80013dc <_svfiprintf_r+0x30>
 80013d0:	230c      	movs	r3, #12
 80013d2:	f8c8 3000 	str.w	r3, [r8]
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	e0c4      	b.n	8001566 <_svfiprintf_r+0x1ba>
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	616b      	str	r3, [r5, #20]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9309      	str	r3, [sp, #36]	; 0x24
 80013e4:	2320      	movs	r3, #32
 80013e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013ea:	2330      	movs	r3, #48	; 0x30
 80013ec:	f04f 0b01 	mov.w	fp, #1
 80013f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013f4:	4637      	mov	r7, r6
 80013f6:	463c      	mov	r4, r7
 80013f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d13c      	bne.n	800147a <_svfiprintf_r+0xce>
 8001400:	ebb7 0a06 	subs.w	sl, r7, r6
 8001404:	d00b      	beq.n	800141e <_svfiprintf_r+0x72>
 8001406:	4653      	mov	r3, sl
 8001408:	4632      	mov	r2, r6
 800140a:	4629      	mov	r1, r5
 800140c:	4640      	mov	r0, r8
 800140e:	f7ff ff71 	bl	80012f4 <__ssputs_r>
 8001412:	3001      	adds	r0, #1
 8001414:	f000 80a2 	beq.w	800155c <_svfiprintf_r+0x1b0>
 8001418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800141a:	4453      	add	r3, sl
 800141c:	9309      	str	r3, [sp, #36]	; 0x24
 800141e:	783b      	ldrb	r3, [r7, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 809b 	beq.w	800155c <_svfiprintf_r+0x1b0>
 8001426:	2300      	movs	r3, #0
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	9304      	str	r3, [sp, #16]
 800142e:	9307      	str	r3, [sp, #28]
 8001430:	9205      	str	r2, [sp, #20]
 8001432:	9306      	str	r3, [sp, #24]
 8001434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001438:	931a      	str	r3, [sp, #104]	; 0x68
 800143a:	2205      	movs	r2, #5
 800143c:	7821      	ldrb	r1, [r4, #0]
 800143e:	4850      	ldr	r0, [pc, #320]	; (8001580 <_svfiprintf_r+0x1d4>)
 8001440:	f000 fa40 	bl	80018c4 <memchr>
 8001444:	1c67      	adds	r7, r4, #1
 8001446:	9b04      	ldr	r3, [sp, #16]
 8001448:	b9d8      	cbnz	r0, 8001482 <_svfiprintf_r+0xd6>
 800144a:	06d9      	lsls	r1, r3, #27
 800144c:	bf44      	itt	mi
 800144e:	2220      	movmi	r2, #32
 8001450:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001454:	071a      	lsls	r2, r3, #28
 8001456:	bf44      	itt	mi
 8001458:	222b      	movmi	r2, #43	; 0x2b
 800145a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800145e:	7822      	ldrb	r2, [r4, #0]
 8001460:	2a2a      	cmp	r2, #42	; 0x2a
 8001462:	d016      	beq.n	8001492 <_svfiprintf_r+0xe6>
 8001464:	2100      	movs	r1, #0
 8001466:	200a      	movs	r0, #10
 8001468:	9a07      	ldr	r2, [sp, #28]
 800146a:	4627      	mov	r7, r4
 800146c:	783b      	ldrb	r3, [r7, #0]
 800146e:	3401      	adds	r4, #1
 8001470:	3b30      	subs	r3, #48	; 0x30
 8001472:	2b09      	cmp	r3, #9
 8001474:	d950      	bls.n	8001518 <_svfiprintf_r+0x16c>
 8001476:	b1c9      	cbz	r1, 80014ac <_svfiprintf_r+0x100>
 8001478:	e011      	b.n	800149e <_svfiprintf_r+0xf2>
 800147a:	2b25      	cmp	r3, #37	; 0x25
 800147c:	d0c0      	beq.n	8001400 <_svfiprintf_r+0x54>
 800147e:	4627      	mov	r7, r4
 8001480:	e7b9      	b.n	80013f6 <_svfiprintf_r+0x4a>
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <_svfiprintf_r+0x1d4>)
 8001484:	463c      	mov	r4, r7
 8001486:	1a80      	subs	r0, r0, r2
 8001488:	fa0b f000 	lsl.w	r0, fp, r0
 800148c:	4318      	orrs	r0, r3
 800148e:	9004      	str	r0, [sp, #16]
 8001490:	e7d3      	b.n	800143a <_svfiprintf_r+0x8e>
 8001492:	9a03      	ldr	r2, [sp, #12]
 8001494:	1d11      	adds	r1, r2, #4
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	9103      	str	r1, [sp, #12]
 800149a:	2a00      	cmp	r2, #0
 800149c:	db01      	blt.n	80014a2 <_svfiprintf_r+0xf6>
 800149e:	9207      	str	r2, [sp, #28]
 80014a0:	e004      	b.n	80014ac <_svfiprintf_r+0x100>
 80014a2:	4252      	negs	r2, r2
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	9207      	str	r2, [sp, #28]
 80014aa:	9304      	str	r3, [sp, #16]
 80014ac:	783b      	ldrb	r3, [r7, #0]
 80014ae:	2b2e      	cmp	r3, #46	; 0x2e
 80014b0:	d10d      	bne.n	80014ce <_svfiprintf_r+0x122>
 80014b2:	787b      	ldrb	r3, [r7, #1]
 80014b4:	1c79      	adds	r1, r7, #1
 80014b6:	2b2a      	cmp	r3, #42	; 0x2a
 80014b8:	d132      	bne.n	8001520 <_svfiprintf_r+0x174>
 80014ba:	9b03      	ldr	r3, [sp, #12]
 80014bc:	3702      	adds	r7, #2
 80014be:	1d1a      	adds	r2, r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	9203      	str	r2, [sp, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bfb8      	it	lt
 80014c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80014cc:	9305      	str	r3, [sp, #20]
 80014ce:	4c2d      	ldr	r4, [pc, #180]	; (8001584 <_svfiprintf_r+0x1d8>)
 80014d0:	2203      	movs	r2, #3
 80014d2:	7839      	ldrb	r1, [r7, #0]
 80014d4:	4620      	mov	r0, r4
 80014d6:	f000 f9f5 	bl	80018c4 <memchr>
 80014da:	b138      	cbz	r0, 80014ec <_svfiprintf_r+0x140>
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	1b00      	subs	r0, r0, r4
 80014e0:	fa03 f000 	lsl.w	r0, r3, r0
 80014e4:	9b04      	ldr	r3, [sp, #16]
 80014e6:	3701      	adds	r7, #1
 80014e8:	4303      	orrs	r3, r0
 80014ea:	9304      	str	r3, [sp, #16]
 80014ec:	7839      	ldrb	r1, [r7, #0]
 80014ee:	2206      	movs	r2, #6
 80014f0:	4825      	ldr	r0, [pc, #148]	; (8001588 <_svfiprintf_r+0x1dc>)
 80014f2:	1c7e      	adds	r6, r7, #1
 80014f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014f8:	f000 f9e4 	bl	80018c4 <memchr>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d035      	beq.n	800156c <_svfiprintf_r+0x1c0>
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <_svfiprintf_r+0x1e0>)
 8001502:	b9fb      	cbnz	r3, 8001544 <_svfiprintf_r+0x198>
 8001504:	9b03      	ldr	r3, [sp, #12]
 8001506:	3307      	adds	r3, #7
 8001508:	f023 0307 	bic.w	r3, r3, #7
 800150c:	3308      	adds	r3, #8
 800150e:	9303      	str	r3, [sp, #12]
 8001510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001512:	444b      	add	r3, r9
 8001514:	9309      	str	r3, [sp, #36]	; 0x24
 8001516:	e76d      	b.n	80013f4 <_svfiprintf_r+0x48>
 8001518:	fb00 3202 	mla	r2, r0, r2, r3
 800151c:	2101      	movs	r1, #1
 800151e:	e7a4      	b.n	800146a <_svfiprintf_r+0xbe>
 8001520:	2300      	movs	r3, #0
 8001522:	240a      	movs	r4, #10
 8001524:	4618      	mov	r0, r3
 8001526:	9305      	str	r3, [sp, #20]
 8001528:	460f      	mov	r7, r1
 800152a:	783a      	ldrb	r2, [r7, #0]
 800152c:	3101      	adds	r1, #1
 800152e:	3a30      	subs	r2, #48	; 0x30
 8001530:	2a09      	cmp	r2, #9
 8001532:	d903      	bls.n	800153c <_svfiprintf_r+0x190>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ca      	beq.n	80014ce <_svfiprintf_r+0x122>
 8001538:	9005      	str	r0, [sp, #20]
 800153a:	e7c8      	b.n	80014ce <_svfiprintf_r+0x122>
 800153c:	fb04 2000 	mla	r0, r4, r0, r2
 8001540:	2301      	movs	r3, #1
 8001542:	e7f1      	b.n	8001528 <_svfiprintf_r+0x17c>
 8001544:	ab03      	add	r3, sp, #12
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	462a      	mov	r2, r5
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_svfiprintf_r+0x1e4>)
 800154c:	a904      	add	r1, sp, #16
 800154e:	4640      	mov	r0, r8
 8001550:	f3af 8000 	nop.w
 8001554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001558:	4681      	mov	r9, r0
 800155a:	d1d9      	bne.n	8001510 <_svfiprintf_r+0x164>
 800155c:	89ab      	ldrh	r3, [r5, #12]
 800155e:	065b      	lsls	r3, r3, #25
 8001560:	f53f af39 	bmi.w	80013d6 <_svfiprintf_r+0x2a>
 8001564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001566:	b01d      	add	sp, #116	; 0x74
 8001568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800156c:	ab03      	add	r3, sp, #12
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	462a      	mov	r2, r5
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_svfiprintf_r+0x1e4>)
 8001574:	a904      	add	r1, sp, #16
 8001576:	4640      	mov	r0, r8
 8001578:	f000 f884 	bl	8001684 <_printf_i>
 800157c:	e7ea      	b.n	8001554 <_svfiprintf_r+0x1a8>
 800157e:	bf00      	nop
 8001580:	08001d7d 	.word	0x08001d7d
 8001584:	08001d83 	.word	0x08001d83
 8001588:	08001d87 	.word	0x08001d87
 800158c:	00000000 	.word	0x00000000
 8001590:	080012f5 	.word	0x080012f5

08001594 <_printf_common>:
 8001594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001598:	4691      	mov	r9, r2
 800159a:	461f      	mov	r7, r3
 800159c:	688a      	ldr	r2, [r1, #8]
 800159e:	690b      	ldr	r3, [r1, #16]
 80015a0:	4606      	mov	r6, r0
 80015a2:	4293      	cmp	r3, r2
 80015a4:	bfb8      	it	lt
 80015a6:	4613      	movlt	r3, r2
 80015a8:	f8c9 3000 	str.w	r3, [r9]
 80015ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015b0:	460c      	mov	r4, r1
 80015b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015b6:	b112      	cbz	r2, 80015be <_printf_common+0x2a>
 80015b8:	3301      	adds	r3, #1
 80015ba:	f8c9 3000 	str.w	r3, [r9]
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	0699      	lsls	r1, r3, #26
 80015c2:	bf42      	ittt	mi
 80015c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80015c8:	3302      	addmi	r3, #2
 80015ca:	f8c9 3000 	strmi.w	r3, [r9]
 80015ce:	6825      	ldr	r5, [r4, #0]
 80015d0:	f015 0506 	ands.w	r5, r5, #6
 80015d4:	d107      	bne.n	80015e6 <_printf_common+0x52>
 80015d6:	f104 0a19 	add.w	sl, r4, #25
 80015da:	68e3      	ldr	r3, [r4, #12]
 80015dc:	f8d9 2000 	ldr.w	r2, [r9]
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	429d      	cmp	r5, r3
 80015e4:	db2a      	blt.n	800163c <_printf_common+0xa8>
 80015e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	3300      	adds	r3, #0
 80015ee:	bf18      	it	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	0692      	lsls	r2, r2, #26
 80015f4:	d42f      	bmi.n	8001656 <_printf_common+0xc2>
 80015f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015fa:	4639      	mov	r1, r7
 80015fc:	4630      	mov	r0, r6
 80015fe:	47c0      	blx	r8
 8001600:	3001      	adds	r0, #1
 8001602:	d022      	beq.n	800164a <_printf_common+0xb6>
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	68e5      	ldr	r5, [r4, #12]
 8001608:	f003 0306 	and.w	r3, r3, #6
 800160c:	2b04      	cmp	r3, #4
 800160e:	bf18      	it	ne
 8001610:	2500      	movne	r5, #0
 8001612:	f8d9 2000 	ldr.w	r2, [r9]
 8001616:	f04f 0900 	mov.w	r9, #0
 800161a:	bf08      	it	eq
 800161c:	1aad      	subeq	r5, r5, r2
 800161e:	68a3      	ldr	r3, [r4, #8]
 8001620:	6922      	ldr	r2, [r4, #16]
 8001622:	bf08      	it	eq
 8001624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001628:	4293      	cmp	r3, r2
 800162a:	bfc4      	itt	gt
 800162c:	1a9b      	subgt	r3, r3, r2
 800162e:	18ed      	addgt	r5, r5, r3
 8001630:	341a      	adds	r4, #26
 8001632:	454d      	cmp	r5, r9
 8001634:	d11b      	bne.n	800166e <_printf_common+0xda>
 8001636:	2000      	movs	r0, #0
 8001638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163c:	2301      	movs	r3, #1
 800163e:	4652      	mov	r2, sl
 8001640:	4639      	mov	r1, r7
 8001642:	4630      	mov	r0, r6
 8001644:	47c0      	blx	r8
 8001646:	3001      	adds	r0, #1
 8001648:	d103      	bne.n	8001652 <_printf_common+0xbe>
 800164a:	f04f 30ff 	mov.w	r0, #4294967295
 800164e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001652:	3501      	adds	r5, #1
 8001654:	e7c1      	b.n	80015da <_printf_common+0x46>
 8001656:	2030      	movs	r0, #48	; 0x30
 8001658:	18e1      	adds	r1, r4, r3
 800165a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001664:	4422      	add	r2, r4
 8001666:	3302      	adds	r3, #2
 8001668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800166c:	e7c3      	b.n	80015f6 <_printf_common+0x62>
 800166e:	2301      	movs	r3, #1
 8001670:	4622      	mov	r2, r4
 8001672:	4639      	mov	r1, r7
 8001674:	4630      	mov	r0, r6
 8001676:	47c0      	blx	r8
 8001678:	3001      	adds	r0, #1
 800167a:	d0e6      	beq.n	800164a <_printf_common+0xb6>
 800167c:	f109 0901 	add.w	r9, r9, #1
 8001680:	e7d7      	b.n	8001632 <_printf_common+0x9e>
	...

08001684 <_printf_i>:
 8001684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001688:	4617      	mov	r7, r2
 800168a:	7e0a      	ldrb	r2, [r1, #24]
 800168c:	b085      	sub	sp, #20
 800168e:	2a6e      	cmp	r2, #110	; 0x6e
 8001690:	4698      	mov	r8, r3
 8001692:	4606      	mov	r6, r0
 8001694:	460c      	mov	r4, r1
 8001696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001698:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800169c:	f000 80bc 	beq.w	8001818 <_printf_i+0x194>
 80016a0:	d81a      	bhi.n	80016d8 <_printf_i+0x54>
 80016a2:	2a63      	cmp	r2, #99	; 0x63
 80016a4:	d02e      	beq.n	8001704 <_printf_i+0x80>
 80016a6:	d80a      	bhi.n	80016be <_printf_i+0x3a>
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	f000 80c8 	beq.w	800183e <_printf_i+0x1ba>
 80016ae:	2a58      	cmp	r2, #88	; 0x58
 80016b0:	f000 808a 	beq.w	80017c8 <_printf_i+0x144>
 80016b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80016bc:	e02a      	b.n	8001714 <_printf_i+0x90>
 80016be:	2a64      	cmp	r2, #100	; 0x64
 80016c0:	d001      	beq.n	80016c6 <_printf_i+0x42>
 80016c2:	2a69      	cmp	r2, #105	; 0x69
 80016c4:	d1f6      	bne.n	80016b4 <_printf_i+0x30>
 80016c6:	6821      	ldr	r1, [r4, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016ce:	d023      	beq.n	8001718 <_printf_i+0x94>
 80016d0:	1d11      	adds	r1, r2, #4
 80016d2:	6019      	str	r1, [r3, #0]
 80016d4:	6813      	ldr	r3, [r2, #0]
 80016d6:	e027      	b.n	8001728 <_printf_i+0xa4>
 80016d8:	2a73      	cmp	r2, #115	; 0x73
 80016da:	f000 80b4 	beq.w	8001846 <_printf_i+0x1c2>
 80016de:	d808      	bhi.n	80016f2 <_printf_i+0x6e>
 80016e0:	2a6f      	cmp	r2, #111	; 0x6f
 80016e2:	d02a      	beq.n	800173a <_printf_i+0xb6>
 80016e4:	2a70      	cmp	r2, #112	; 0x70
 80016e6:	d1e5      	bne.n	80016b4 <_printf_i+0x30>
 80016e8:	680a      	ldr	r2, [r1, #0]
 80016ea:	f042 0220 	orr.w	r2, r2, #32
 80016ee:	600a      	str	r2, [r1, #0]
 80016f0:	e003      	b.n	80016fa <_printf_i+0x76>
 80016f2:	2a75      	cmp	r2, #117	; 0x75
 80016f4:	d021      	beq.n	800173a <_printf_i+0xb6>
 80016f6:	2a78      	cmp	r2, #120	; 0x78
 80016f8:	d1dc      	bne.n	80016b4 <_printf_i+0x30>
 80016fa:	2278      	movs	r2, #120	; 0x78
 80016fc:	496f      	ldr	r1, [pc, #444]	; (80018bc <_printf_i+0x238>)
 80016fe:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001702:	e064      	b.n	80017ce <_printf_i+0x14a>
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800170a:	1d11      	adds	r1, r2, #4
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001714:	2301      	movs	r3, #1
 8001716:	e0a3      	b.n	8001860 <_printf_i+0x1dc>
 8001718:	f011 0f40 	tst.w	r1, #64	; 0x40
 800171c:	f102 0104 	add.w	r1, r2, #4
 8001720:	6019      	str	r1, [r3, #0]
 8001722:	d0d7      	beq.n	80016d4 <_printf_i+0x50>
 8001724:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da03      	bge.n	8001734 <_printf_i+0xb0>
 800172c:	222d      	movs	r2, #45	; 0x2d
 800172e:	425b      	negs	r3, r3
 8001730:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001734:	4962      	ldr	r1, [pc, #392]	; (80018c0 <_printf_i+0x23c>)
 8001736:	220a      	movs	r2, #10
 8001738:	e017      	b.n	800176a <_printf_i+0xe6>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001742:	d003      	beq.n	800174c <_printf_i+0xc8>
 8001744:	1d08      	adds	r0, r1, #4
 8001746:	6018      	str	r0, [r3, #0]
 8001748:	680b      	ldr	r3, [r1, #0]
 800174a:	e006      	b.n	800175a <_printf_i+0xd6>
 800174c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001750:	f101 0004 	add.w	r0, r1, #4
 8001754:	6018      	str	r0, [r3, #0]
 8001756:	d0f7      	beq.n	8001748 <_printf_i+0xc4>
 8001758:	880b      	ldrh	r3, [r1, #0]
 800175a:	2a6f      	cmp	r2, #111	; 0x6f
 800175c:	bf14      	ite	ne
 800175e:	220a      	movne	r2, #10
 8001760:	2208      	moveq	r2, #8
 8001762:	4957      	ldr	r1, [pc, #348]	; (80018c0 <_printf_i+0x23c>)
 8001764:	2000      	movs	r0, #0
 8001766:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800176a:	6865      	ldr	r5, [r4, #4]
 800176c:	2d00      	cmp	r5, #0
 800176e:	60a5      	str	r5, [r4, #8]
 8001770:	f2c0 809c 	blt.w	80018ac <_printf_i+0x228>
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	f020 0004 	bic.w	r0, r0, #4
 800177a:	6020      	str	r0, [r4, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d13f      	bne.n	8001800 <_printf_i+0x17c>
 8001780:	2d00      	cmp	r5, #0
 8001782:	f040 8095 	bne.w	80018b0 <_printf_i+0x22c>
 8001786:	4675      	mov	r5, lr
 8001788:	2a08      	cmp	r2, #8
 800178a:	d10b      	bne.n	80017a4 <_printf_i+0x120>
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	07da      	lsls	r2, r3, #31
 8001790:	d508      	bpl.n	80017a4 <_printf_i+0x120>
 8001792:	6923      	ldr	r3, [r4, #16]
 8001794:	6862      	ldr	r2, [r4, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	bfde      	ittt	le
 800179a:	2330      	movle	r3, #48	; 0x30
 800179c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017a4:	ebae 0305 	sub.w	r3, lr, r5
 80017a8:	6123      	str	r3, [r4, #16]
 80017aa:	f8cd 8000 	str.w	r8, [sp]
 80017ae:	463b      	mov	r3, r7
 80017b0:	aa03      	add	r2, sp, #12
 80017b2:	4621      	mov	r1, r4
 80017b4:	4630      	mov	r0, r6
 80017b6:	f7ff feed 	bl	8001594 <_printf_common>
 80017ba:	3001      	adds	r0, #1
 80017bc:	d155      	bne.n	800186a <_printf_i+0x1e6>
 80017be:	f04f 30ff 	mov.w	r0, #4294967295
 80017c2:	b005      	add	sp, #20
 80017c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80017cc:	493c      	ldr	r1, [pc, #240]	; (80018c0 <_printf_i+0x23c>)
 80017ce:	6822      	ldr	r2, [r4, #0]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80017d6:	f100 0504 	add.w	r5, r0, #4
 80017da:	601d      	str	r5, [r3, #0]
 80017dc:	d001      	beq.n	80017e2 <_printf_i+0x15e>
 80017de:	6803      	ldr	r3, [r0, #0]
 80017e0:	e002      	b.n	80017e8 <_printf_i+0x164>
 80017e2:	0655      	lsls	r5, r2, #25
 80017e4:	d5fb      	bpl.n	80017de <_printf_i+0x15a>
 80017e6:	8803      	ldrh	r3, [r0, #0]
 80017e8:	07d0      	lsls	r0, r2, #31
 80017ea:	bf44      	itt	mi
 80017ec:	f042 0220 	orrmi.w	r2, r2, #32
 80017f0:	6022      	strmi	r2, [r4, #0]
 80017f2:	b91b      	cbnz	r3, 80017fc <_printf_i+0x178>
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	f022 0220 	bic.w	r2, r2, #32
 80017fa:	6022      	str	r2, [r4, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	e7b1      	b.n	8001764 <_printf_i+0xe0>
 8001800:	4675      	mov	r5, lr
 8001802:	fbb3 f0f2 	udiv	r0, r3, r2
 8001806:	fb02 3310 	mls	r3, r2, r0, r3
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001810:	4603      	mov	r3, r0
 8001812:	2800      	cmp	r0, #0
 8001814:	d1f5      	bne.n	8001802 <_printf_i+0x17e>
 8001816:	e7b7      	b.n	8001788 <_printf_i+0x104>
 8001818:	6808      	ldr	r0, [r1, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001820:	6949      	ldr	r1, [r1, #20]
 8001822:	d004      	beq.n	800182e <_printf_i+0x1aa>
 8001824:	1d10      	adds	r0, r2, #4
 8001826:	6018      	str	r0, [r3, #0]
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	6019      	str	r1, [r3, #0]
 800182c:	e007      	b.n	800183e <_printf_i+0x1ba>
 800182e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001832:	f102 0004 	add.w	r0, r2, #4
 8001836:	6018      	str	r0, [r3, #0]
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	d0f6      	beq.n	800182a <_printf_i+0x1a6>
 800183c:	8019      	strh	r1, [r3, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	4675      	mov	r5, lr
 8001842:	6123      	str	r3, [r4, #16]
 8001844:	e7b1      	b.n	80017aa <_printf_i+0x126>
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	1d11      	adds	r1, r2, #4
 800184a:	6019      	str	r1, [r3, #0]
 800184c:	6815      	ldr	r5, [r2, #0]
 800184e:	2100      	movs	r1, #0
 8001850:	6862      	ldr	r2, [r4, #4]
 8001852:	4628      	mov	r0, r5
 8001854:	f000 f836 	bl	80018c4 <memchr>
 8001858:	b108      	cbz	r0, 800185e <_printf_i+0x1da>
 800185a:	1b40      	subs	r0, r0, r5
 800185c:	6060      	str	r0, [r4, #4]
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	6123      	str	r3, [r4, #16]
 8001862:	2300      	movs	r3, #0
 8001864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001868:	e79f      	b.n	80017aa <_printf_i+0x126>
 800186a:	6923      	ldr	r3, [r4, #16]
 800186c:	462a      	mov	r2, r5
 800186e:	4639      	mov	r1, r7
 8001870:	4630      	mov	r0, r6
 8001872:	47c0      	blx	r8
 8001874:	3001      	adds	r0, #1
 8001876:	d0a2      	beq.n	80017be <_printf_i+0x13a>
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	079b      	lsls	r3, r3, #30
 800187c:	d507      	bpl.n	800188e <_printf_i+0x20a>
 800187e:	2500      	movs	r5, #0
 8001880:	f104 0919 	add.w	r9, r4, #25
 8001884:	68e3      	ldr	r3, [r4, #12]
 8001886:	9a03      	ldr	r2, [sp, #12]
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	429d      	cmp	r5, r3
 800188c:	db05      	blt.n	800189a <_printf_i+0x216>
 800188e:	68e0      	ldr	r0, [r4, #12]
 8001890:	9b03      	ldr	r3, [sp, #12]
 8001892:	4298      	cmp	r0, r3
 8001894:	bfb8      	it	lt
 8001896:	4618      	movlt	r0, r3
 8001898:	e793      	b.n	80017c2 <_printf_i+0x13e>
 800189a:	2301      	movs	r3, #1
 800189c:	464a      	mov	r2, r9
 800189e:	4639      	mov	r1, r7
 80018a0:	4630      	mov	r0, r6
 80018a2:	47c0      	blx	r8
 80018a4:	3001      	adds	r0, #1
 80018a6:	d08a      	beq.n	80017be <_printf_i+0x13a>
 80018a8:	3501      	adds	r5, #1
 80018aa:	e7eb      	b.n	8001884 <_printf_i+0x200>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1a7      	bne.n	8001800 <_printf_i+0x17c>
 80018b0:	780b      	ldrb	r3, [r1, #0]
 80018b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018ba:	e765      	b.n	8001788 <_printf_i+0x104>
 80018bc:	08001d9f 	.word	0x08001d9f
 80018c0:	08001d8e 	.word	0x08001d8e

080018c4 <memchr>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	b2c9      	uxtb	r1, r1
 80018c8:	4402      	add	r2, r0
 80018ca:	4290      	cmp	r0, r2
 80018cc:	4603      	mov	r3, r0
 80018ce:	d101      	bne.n	80018d4 <memchr+0x10>
 80018d0:	2000      	movs	r0, #0
 80018d2:	bd10      	pop	{r4, pc}
 80018d4:	781c      	ldrb	r4, [r3, #0]
 80018d6:	3001      	adds	r0, #1
 80018d8:	428c      	cmp	r4, r1
 80018da:	d1f6      	bne.n	80018ca <memchr+0x6>
 80018dc:	4618      	mov	r0, r3
 80018de:	bd10      	pop	{r4, pc}

080018e0 <memcpy>:
 80018e0:	b510      	push	{r4, lr}
 80018e2:	1e43      	subs	r3, r0, #1
 80018e4:	440a      	add	r2, r1
 80018e6:	4291      	cmp	r1, r2
 80018e8:	d100      	bne.n	80018ec <memcpy+0xc>
 80018ea:	bd10      	pop	{r4, pc}
 80018ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018f4:	e7f7      	b.n	80018e6 <memcpy+0x6>

080018f6 <memmove>:
 80018f6:	4288      	cmp	r0, r1
 80018f8:	b510      	push	{r4, lr}
 80018fa:	eb01 0302 	add.w	r3, r1, r2
 80018fe:	d803      	bhi.n	8001908 <memmove+0x12>
 8001900:	1e42      	subs	r2, r0, #1
 8001902:	4299      	cmp	r1, r3
 8001904:	d10c      	bne.n	8001920 <memmove+0x2a>
 8001906:	bd10      	pop	{r4, pc}
 8001908:	4298      	cmp	r0, r3
 800190a:	d2f9      	bcs.n	8001900 <memmove+0xa>
 800190c:	1881      	adds	r1, r0, r2
 800190e:	1ad2      	subs	r2, r2, r3
 8001910:	42d3      	cmn	r3, r2
 8001912:	d100      	bne.n	8001916 <memmove+0x20>
 8001914:	bd10      	pop	{r4, pc}
 8001916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800191a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800191e:	e7f7      	b.n	8001910 <memmove+0x1a>
 8001920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001924:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001928:	e7eb      	b.n	8001902 <memmove+0xc>
	...

0800192c <_free_r>:
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4605      	mov	r5, r0
 8001930:	2900      	cmp	r1, #0
 8001932:	d043      	beq.n	80019bc <_free_r+0x90>
 8001934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001938:	1f0c      	subs	r4, r1, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfb8      	it	lt
 800193e:	18e4      	addlt	r4, r4, r3
 8001940:	f000 f8d4 	bl	8001aec <__malloc_lock>
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <_free_r+0x94>)
 8001946:	6813      	ldr	r3, [r2, #0]
 8001948:	4610      	mov	r0, r2
 800194a:	b933      	cbnz	r3, 800195a <_free_r+0x2e>
 800194c:	6063      	str	r3, [r4, #4]
 800194e:	6014      	str	r4, [r2, #0]
 8001950:	4628      	mov	r0, r5
 8001952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001956:	f000 b8ca 	b.w	8001aee <__malloc_unlock>
 800195a:	42a3      	cmp	r3, r4
 800195c:	d90b      	bls.n	8001976 <_free_r+0x4a>
 800195e:	6821      	ldr	r1, [r4, #0]
 8001960:	1862      	adds	r2, r4, r1
 8001962:	4293      	cmp	r3, r2
 8001964:	bf01      	itttt	eq
 8001966:	681a      	ldreq	r2, [r3, #0]
 8001968:	685b      	ldreq	r3, [r3, #4]
 800196a:	1852      	addeq	r2, r2, r1
 800196c:	6022      	streq	r2, [r4, #0]
 800196e:	6063      	str	r3, [r4, #4]
 8001970:	6004      	str	r4, [r0, #0]
 8001972:	e7ed      	b.n	8001950 <_free_r+0x24>
 8001974:	4613      	mov	r3, r2
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	b10a      	cbz	r2, 800197e <_free_r+0x52>
 800197a:	42a2      	cmp	r2, r4
 800197c:	d9fa      	bls.n	8001974 <_free_r+0x48>
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	1858      	adds	r0, r3, r1
 8001982:	42a0      	cmp	r0, r4
 8001984:	d10b      	bne.n	800199e <_free_r+0x72>
 8001986:	6820      	ldr	r0, [r4, #0]
 8001988:	4401      	add	r1, r0
 800198a:	1858      	adds	r0, r3, r1
 800198c:	4282      	cmp	r2, r0
 800198e:	6019      	str	r1, [r3, #0]
 8001990:	d1de      	bne.n	8001950 <_free_r+0x24>
 8001992:	6810      	ldr	r0, [r2, #0]
 8001994:	6852      	ldr	r2, [r2, #4]
 8001996:	4401      	add	r1, r0
 8001998:	6019      	str	r1, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	e7d8      	b.n	8001950 <_free_r+0x24>
 800199e:	d902      	bls.n	80019a6 <_free_r+0x7a>
 80019a0:	230c      	movs	r3, #12
 80019a2:	602b      	str	r3, [r5, #0]
 80019a4:	e7d4      	b.n	8001950 <_free_r+0x24>
 80019a6:	6820      	ldr	r0, [r4, #0]
 80019a8:	1821      	adds	r1, r4, r0
 80019aa:	428a      	cmp	r2, r1
 80019ac:	bf01      	itttt	eq
 80019ae:	6811      	ldreq	r1, [r2, #0]
 80019b0:	6852      	ldreq	r2, [r2, #4]
 80019b2:	1809      	addeq	r1, r1, r0
 80019b4:	6021      	streq	r1, [r4, #0]
 80019b6:	6062      	str	r2, [r4, #4]
 80019b8:	605c      	str	r4, [r3, #4]
 80019ba:	e7c9      	b.n	8001950 <_free_r+0x24>
 80019bc:	bd38      	pop	{r3, r4, r5, pc}
 80019be:	bf00      	nop
 80019c0:	20000098 	.word	0x20000098

080019c4 <_malloc_r>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	1ccd      	adds	r5, r1, #3
 80019c8:	f025 0503 	bic.w	r5, r5, #3
 80019cc:	3508      	adds	r5, #8
 80019ce:	2d0c      	cmp	r5, #12
 80019d0:	bf38      	it	cc
 80019d2:	250c      	movcc	r5, #12
 80019d4:	2d00      	cmp	r5, #0
 80019d6:	4606      	mov	r6, r0
 80019d8:	db01      	blt.n	80019de <_malloc_r+0x1a>
 80019da:	42a9      	cmp	r1, r5
 80019dc:	d903      	bls.n	80019e6 <_malloc_r+0x22>
 80019de:	230c      	movs	r3, #12
 80019e0:	6033      	str	r3, [r6, #0]
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
 80019e6:	f000 f881 	bl	8001aec <__malloc_lock>
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <_malloc_r+0xb4>)
 80019ec:	6814      	ldr	r4, [r2, #0]
 80019ee:	4621      	mov	r1, r4
 80019f0:	b991      	cbnz	r1, 8001a18 <_malloc_r+0x54>
 80019f2:	4c22      	ldr	r4, [pc, #136]	; (8001a7c <_malloc_r+0xb8>)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	b91b      	cbnz	r3, 8001a00 <_malloc_r+0x3c>
 80019f8:	4630      	mov	r0, r6
 80019fa:	f000 f867 	bl	8001acc <_sbrk_r>
 80019fe:	6020      	str	r0, [r4, #0]
 8001a00:	4629      	mov	r1, r5
 8001a02:	4630      	mov	r0, r6
 8001a04:	f000 f862 	bl	8001acc <_sbrk_r>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	d126      	bne.n	8001a5a <_malloc_r+0x96>
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	4630      	mov	r0, r6
 8001a10:	6033      	str	r3, [r6, #0]
 8001a12:	f000 f86c 	bl	8001aee <__malloc_unlock>
 8001a16:	e7e4      	b.n	80019e2 <_malloc_r+0x1e>
 8001a18:	680b      	ldr	r3, [r1, #0]
 8001a1a:	1b5b      	subs	r3, r3, r5
 8001a1c:	d41a      	bmi.n	8001a54 <_malloc_r+0x90>
 8001a1e:	2b0b      	cmp	r3, #11
 8001a20:	d90f      	bls.n	8001a42 <_malloc_r+0x7e>
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	18cc      	adds	r4, r1, r3
 8001a26:	50cd      	str	r5, [r1, r3]
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f000 f860 	bl	8001aee <__malloc_unlock>
 8001a2e:	f104 000b 	add.w	r0, r4, #11
 8001a32:	1d23      	adds	r3, r4, #4
 8001a34:	f020 0007 	bic.w	r0, r0, #7
 8001a38:	1ac3      	subs	r3, r0, r3
 8001a3a:	d01b      	beq.n	8001a74 <_malloc_r+0xb0>
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	50e2      	str	r2, [r4, r3]
 8001a40:	bd70      	pop	{r4, r5, r6, pc}
 8001a42:	428c      	cmp	r4, r1
 8001a44:	bf0b      	itete	eq
 8001a46:	6863      	ldreq	r3, [r4, #4]
 8001a48:	684b      	ldrne	r3, [r1, #4]
 8001a4a:	6013      	streq	r3, [r2, #0]
 8001a4c:	6063      	strne	r3, [r4, #4]
 8001a4e:	bf18      	it	ne
 8001a50:	460c      	movne	r4, r1
 8001a52:	e7e9      	b.n	8001a28 <_malloc_r+0x64>
 8001a54:	460c      	mov	r4, r1
 8001a56:	6849      	ldr	r1, [r1, #4]
 8001a58:	e7ca      	b.n	80019f0 <_malloc_r+0x2c>
 8001a5a:	1cc4      	adds	r4, r0, #3
 8001a5c:	f024 0403 	bic.w	r4, r4, #3
 8001a60:	42a0      	cmp	r0, r4
 8001a62:	d005      	beq.n	8001a70 <_malloc_r+0xac>
 8001a64:	1a21      	subs	r1, r4, r0
 8001a66:	4630      	mov	r0, r6
 8001a68:	f000 f830 	bl	8001acc <_sbrk_r>
 8001a6c:	3001      	adds	r0, #1
 8001a6e:	d0cd      	beq.n	8001a0c <_malloc_r+0x48>
 8001a70:	6025      	str	r5, [r4, #0]
 8001a72:	e7d9      	b.n	8001a28 <_malloc_r+0x64>
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
 8001a76:	bf00      	nop
 8001a78:	20000098 	.word	0x20000098
 8001a7c:	2000009c 	.word	0x2000009c

08001a80 <_realloc_r>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	4607      	mov	r7, r0
 8001a84:	4614      	mov	r4, r2
 8001a86:	460e      	mov	r6, r1
 8001a88:	b921      	cbnz	r1, 8001a94 <_realloc_r+0x14>
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a90:	f7ff bf98 	b.w	80019c4 <_malloc_r>
 8001a94:	b922      	cbnz	r2, 8001aa0 <_realloc_r+0x20>
 8001a96:	f7ff ff49 	bl	800192c <_free_r>
 8001a9a:	4625      	mov	r5, r4
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	f000 f826 	bl	8001af0 <_malloc_usable_size_r>
 8001aa4:	4284      	cmp	r4, r0
 8001aa6:	d90f      	bls.n	8001ac8 <_realloc_r+0x48>
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f7ff ff8a 	bl	80019c4 <_malloc_r>
 8001ab0:	4605      	mov	r5, r0
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d0f2      	beq.n	8001a9c <_realloc_r+0x1c>
 8001ab6:	4631      	mov	r1, r6
 8001ab8:	4622      	mov	r2, r4
 8001aba:	f7ff ff11 	bl	80018e0 <memcpy>
 8001abe:	4631      	mov	r1, r6
 8001ac0:	4638      	mov	r0, r7
 8001ac2:	f7ff ff33 	bl	800192c <_free_r>
 8001ac6:	e7e9      	b.n	8001a9c <_realloc_r+0x1c>
 8001ac8:	4635      	mov	r5, r6
 8001aca:	e7e7      	b.n	8001a9c <_realloc_r+0x1c>

08001acc <_sbrk_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4c05      	ldr	r4, [pc, #20]	; (8001ae8 <_sbrk_r+0x1c>)
 8001ad2:	4605      	mov	r5, r0
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	6023      	str	r3, [r4, #0]
 8001ad8:	f7ff fb52 	bl	8001180 <_sbrk>
 8001adc:	1c43      	adds	r3, r0, #1
 8001ade:	d102      	bne.n	8001ae6 <_sbrk_r+0x1a>
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	b103      	cbz	r3, 8001ae6 <_sbrk_r+0x1a>
 8001ae4:	602b      	str	r3, [r5, #0]
 8001ae6:	bd38      	pop	{r3, r4, r5, pc}
 8001ae8:	200001b4 	.word	0x200001b4

08001aec <__malloc_lock>:
 8001aec:	4770      	bx	lr

08001aee <__malloc_unlock>:
 8001aee:	4770      	bx	lr

08001af0 <_malloc_usable_size_r>:
 8001af0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001af4:	2800      	cmp	r0, #0
 8001af6:	f1a0 0004 	sub.w	r0, r0, #4
 8001afa:	bfbc      	itt	lt
 8001afc:	580b      	ldrlt	r3, [r1, r0]
 8001afe:	18c0      	addlt	r0, r0, r3
 8001b00:	4770      	bx	lr
	...

08001b04 <_init>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	bf00      	nop
 8001b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0a:	bc08      	pop	{r3}
 8001b0c:	469e      	mov	lr, r3
 8001b0e:	4770      	bx	lr

08001b10 <_fini>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr
